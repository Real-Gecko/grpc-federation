// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"
	"runtime/debug"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	post "example/post"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_CustomMessageArgument is argument for "org.federation.CustomMessage" message.
type Org_Federation_CustomMessageArgument[T any] struct {
	Msg    string
	Client T
}

// Org_Federation_GetPostResponseArgument is argument for "org.federation.GetPostResponse" message.
type Org_Federation_GetPostResponseArgument[T any] struct {
	Id     string
	Post   *Post
	Client T
}

// Org_Federation_LocalizedMessageArgument is argument for "org.federation.LocalizedMessage" message.
type Org_Federation_LocalizedMessageArgument[T any] struct {
	Value  string
	Client T
}

// Org_Federation_PostArgument is argument for "org.federation.Post" message.
type Org_Federation_PostArgument[T any] struct {
	Id                  string
	LocalizedMsg        *LocalizedMessage
	Post                *post.Post
	Res                 *post.GetPostResponse
	XDef0ErrDetail0Msg0 *CustomMessage
	Client              T
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Org_Post_PostServiceClient create a gRPC Client to be used to call methods in org.post.PostService.
	Org_Post_PostServiceClient(FederationServiceClientConfig) (post.PostServiceClient, error)
}

// FederationServiceClientConfig information set in `dependencies` of the `grpc.federation.service` option.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service returns the name of the service on Protocol Buffers.
	Service string
	// Name is the value set for `name` in `dependencies` of the `grpc.federation.service` option.
	// It must be unique among the services on which the Federation Service depends.
	Name string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Org_Post_PostServiceClient post.PostServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Org_Post_PostService_GetPost = "/org.post.PostService/GetPost"
)

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg          FederationServiceConfig
	logger       *slog.Logger
	errorHandler grpcfed.ErrorHandler
	env          *grpcfed.CELEnv
	tracer       trace.Tracer
	client       *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Org_Post_PostServiceClient, err := cfg.Client.Org_Post_PostServiceClient(FederationServiceClientConfig{
		Service: "org.post.PostService",
		Name:    "",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celHelper := grpcfed.NewCELTypeHelper(map[string]map[string]*grpcfed.CELFieldType{
		"grpc.federation.private.CustomMessageArgument": {
			"msg": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Msg"),
		},
		"grpc.federation.private.GetPostResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.LocalizedMessageArgument": {
			"value": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Value"),
		},
		"grpc.federation.private.PostArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
	})
	envOpts := grpcfed.NewDefaultEnvOptions(celHelper)
	env, err := grpcfed.NewCELEnv(envOpts...)
	if err != nil {
		return nil, err
	}
	return &FederationService{
		cfg:          cfg,
		logger:       logger,
		errorHandler: errorHandler,
		env:          env,
		tracer:       otel.Tracer("org.federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Org_Post_PostServiceClient: Org_Post_PostServiceClient,
		},
	}, nil
}

// GetPost implements "org.federation.FederationService/GetPost" method.
func (s *FederationService) GetPost(ctx context.Context, req *GetPostRequest) (res *GetPostResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/GetPost")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, s.logger, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetPostResponse(ctx, &Org_Federation_GetPostResponseArgument[*FederationServiceDependentClientSet]{
		Client: s.client,
		Id:     req.Id,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, s.logger, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_CustomMessage resolve "org.federation.CustomMessage" message.
func (s *FederationService) resolve_Org_Federation_CustomMessage(ctx context.Context, req *Org_Federation_CustomMessageArgument[*FederationServiceDependentClientSet]) (*CustomMessage, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.CustomMessage")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.CustomMessage", slog.Any("message_args", s.logvalue_Org_Federation_CustomMessageArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(s.env, "grpc.federation.private.CustomMessageArgument", req)}

	// create a message value to be returned.
	ret := &CustomMessage{}

	// field binding section.
	// (grpc.federation.field).by = "'custom error message:' + $.msg"
	if err := grpcfed.SetCELValue(ctx, value, "'custom error message:' + $.msg", func(v string) { ret.Msg = v }); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	s.logger.DebugContext(ctx, "resolved org.federation.CustomMessage", slog.Any("org.federation.CustomMessage", s.logvalue_Org_Federation_CustomMessage(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetPostResponse resolve "org.federation.GetPostResponse" message.
func (s *FederationService) resolve_Org_Federation_GetPostResponse(ctx context.Context, req *Org_Federation_GetPostResponseArgument[*FederationServiceDependentClientSet]) (*GetPostResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetPostResponse")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.GetPostResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetPostResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			post *Post
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(s.env, "grpc.federation.private.GetPostResponseArgument", req)}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "post"
	     message {
	       name: "Post"
	       args { name: "id", by: "$.id" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*Post, *localValueType]{
		Name:   "post",
		Type:   grpcfed.CELObjectType("org.federation.Post"),
		Setter: func(value *localValueType, v *Post) { value.vars.post = v },
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Org_Federation_PostArgument[*FederationServiceDependentClientSet]{
				Client: s.client,
			}
			// { name: "id", by: "$.id" }
			if err := grpcfed.SetCELValue(ctx, value, "$.id", func(v string) {
				args.Id = v
			}); err != nil {
				return nil, err
			}
			return s.resolve_Org_Federation_Post(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Post = value.vars.post

	// create a message value to be returned.
	ret := &GetPostResponse{}

	// field binding section.
	// (grpc.federation.field).by = "post"
	if err := grpcfed.SetCELValue(ctx, value, "post", func(v *Post) { ret.Post = v }); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	s.logger.DebugContext(ctx, "resolved org.federation.GetPostResponse", slog.Any("org.federation.GetPostResponse", s.logvalue_Org_Federation_GetPostResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_LocalizedMessage resolve "org.federation.LocalizedMessage" message.
func (s *FederationService) resolve_Org_Federation_LocalizedMessage(ctx context.Context, req *Org_Federation_LocalizedMessageArgument[*FederationServiceDependentClientSet]) (*LocalizedMessage, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.LocalizedMessage")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.LocalizedMessage", slog.Any("message_args", s.logvalue_Org_Federation_LocalizedMessageArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(s.env, "grpc.federation.private.LocalizedMessageArgument", req)}

	// create a message value to be returned.
	ret := &LocalizedMessage{}

	// field binding section.
	// (grpc.federation.field).by = "'localized value:' + $.value"
	if err := grpcfed.SetCELValue(ctx, value, "'localized value:' + $.value", func(v string) { ret.Value = v }); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	s.logger.DebugContext(ctx, "resolved org.federation.LocalizedMessage", slog.Any("org.federation.LocalizedMessage", s.logvalue_Org_Federation_LocalizedMessage(ret)))
	return ret, nil
}

// resolve_Org_Federation_Post resolve "org.federation.Post" message.
func (s *FederationService) resolve_Org_Federation_Post(ctx context.Context, req *Org_Federation_PostArgument[*FederationServiceDependentClientSet]) (*Post, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.Post")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.Post", slog.Any("message_args", s.logvalue_Org_Federation_PostArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			_def0_err_detail0_msg0 *CustomMessage
			id                     string
			localized_msg          *LocalizedMessage
			post                   *post.Post
			res                    *post.GetPostResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(s.env, "grpc.federation.private.PostArgument", req)}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "org.post.PostService/GetPost"
	       request { field: "id", by: "$.id" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.GetPostResponse, *localValueType]{
		Name:   "res",
		Type:   grpcfed.CELObjectType("org.post.GetPostResponse"),
		Setter: func(value *localValueType, v *post.GetPostResponse) { value.vars.res = v },
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &post.GetPostRequest{}
			// { field: "id", by: "$.id" }
			if err := grpcfed.SetCELValue(ctx, value, "$.id", func(v string) {
				args.Id = v
			}); err != nil {
				return nil, err
			}
			return s.client.Org_Post_PostServiceClient.GetPost(ctx, args)
		},
	}); err != nil {
		stat, handleErr := func() (*grpcfed.Status, error) {
			var stat *grpcfed.Status

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "id"
			     by: "$.id"
			   }
			*/
			if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[string, *localValueType]{
				Name:   "id",
				Type:   grpcfed.CELStringType,
				Setter: func(value *localValueType, v string) { value.vars.id = v },
				By:     "$.id",
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx, err)
				return nil, err
			}
			if err := grpcfed.If(ctx, value, "id == ''", func(value *localValueType) error {
				var details []grpcfed.ProtoMessage
				if _, err := func() (any, error) {

					// This section's codes are generated by the following proto definition.
					/*
					   def {
					     name: "localized_msg"
					     message {
					       name: "LocalizedMessage"
					       args { name: "value", by: "id" }
					     }
					   }
					*/
					if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*LocalizedMessage, *localValueType]{
						Name:   "localized_msg",
						Type:   grpcfed.CELObjectType("org.federation.LocalizedMessage"),
						Setter: func(value *localValueType, v *LocalizedMessage) { value.vars.localized_msg = v },
						Message: func(ctx context.Context, value *localValueType) (any, error) {
							args := &Org_Federation_LocalizedMessageArgument[*FederationServiceDependentClientSet]{
								Client: s.client,
							}
							// { name: "value", by: "id" }
							if err := grpcfed.SetCELValue(ctx, value, "id", func(v string) {
								args.Value = v
							}); err != nil {
								return nil, err
							}
							return s.resolve_Org_Federation_LocalizedMessage(ctx, args)
						},
					}); err != nil {
						grpcfed.RecordErrorToSpan(ctx, err)
						return nil, err
					}
					return nil, nil
				}(); err != nil {
					return err
				}
				if err := grpcfed.If(ctx, value, "true", func(value *localValueType) error {
					if _, err := func() (any, error) {

						// This section's codes are generated by the following proto definition.
						/*
						   def {
						     name: "_def0_err_detail0_msg0"
						     message {
						       name: "CustomMessage"
						       args { name: "msg", by: "id" }
						     }
						   }
						*/
						if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*CustomMessage, *localValueType]{
							Name:   "_def0_err_detail0_msg0",
							Type:   grpcfed.CELObjectType("org.federation.CustomMessage"),
							Setter: func(value *localValueType, v *CustomMessage) { value.vars._def0_err_detail0_msg0 = v },
							Message: func(ctx context.Context, value *localValueType) (any, error) {
								args := &Org_Federation_CustomMessageArgument[*FederationServiceDependentClientSet]{
									Client: s.client,
								}
								// { name: "msg", by: "id" }
								if err := grpcfed.SetCELValue(ctx, value, "id", func(v string) {
									args.Msg = v
								}); err != nil {
									return nil, err
								}
								return s.resolve_Org_Federation_CustomMessage(ctx, args)
							},
						}); err != nil {
							grpcfed.RecordErrorToSpan(ctx, err)
							return nil, err
						}
						return nil, nil
					}(); err != nil {
						return err
					}
					if detail := grpcfed.CustomMessage(ctx, value, "_def0_err_detail0_msg0", 0); detail != nil {
						details = append(details, detail)
					}
					if detail := grpcfed.PreconditionFailure(ctx, value, []*grpcfed.PreconditionFailureViolation{
						{
							Type:    "'some-type'",
							Subject: "'some-subject'",
							Desc:    "'some-description'",
						},
					}); detail != nil {
						details = append(details, detail)
					}
					if detail := grpcfed.LocalizedMessage(ctx, value, "en-US", "localized_msg.value"); detail != nil {
						details = append(details, detail)
					}
					return nil
				}); err != nil {
					return err
				}
				status := grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, "'id must be not empty'")
				statusWithDetails, err := status.WithDetails(details...)
				if err != nil {
					s.logger.ErrorContext(ctx, "failed setting error details", slog.String("error", err.Error()))
					stat = status
				} else {
					stat = statusWithDetails
				}
				return nil
			}); err != nil {
				return nil, err
			}
			if stat != nil {
				return stat, nil
			}
			if err := grpcfed.If(ctx, value, "true", func(value *localValueType) error {
				stat = grpcfed.NewGRPCStatus(grpcfed.OKCode, "ignore error")
				return nil
			}); err != nil {
				return nil, err
			}
			if stat != nil {
				return stat, nil
			}
			return nil, nil
		}()
		if handleErr != nil {
			s.logger.ErrorContext(ctx, "failed to handle error", slog.String("error", handleErr.Error()))
			// If it fails during error handling, return the original error.
			if err := s.errorHandler(ctx, FederationService_DependentMethod_Org_Post_PostService_GetPost, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx, err)
				return nil, err
			}
		} else if stat != nil {
			if err := s.errorHandler(ctx, FederationService_DependentMethod_Org_Post_PostService_GetPost, stat.Err()); err != nil {
				grpcfed.RecordErrorToSpan(ctx, err)
				return nil, err
			}
		} else {
			if err := s.errorHandler(ctx, FederationService_DependentMethod_Org_Post_PostService_GetPost, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx, err)
				return nil, err
			}
		}
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "post"
	     autobind: true
	     by: "res.post"
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.Post, *localValueType]{
		Name:   "post",
		Type:   grpcfed.CELObjectType("org.post.Post"),
		Setter: func(value *localValueType, v *post.Post) { value.vars.post = v },
		By:     "res.post",
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Id = value.vars.id
	req.LocalizedMsg = value.vars.localized_msg
	req.Post = value.vars.post
	req.Res = value.vars.res
	req.XDef0ErrDetail0Msg0 = value.vars._def0_err_detail0_msg0

	// create a message value to be returned.
	ret := &Post{}

	// field binding section.
	ret.Id = value.vars.post.GetId()       // { name: "post", autobind: true }
	ret.Title = value.vars.post.GetTitle() // { name: "post", autobind: true }

	s.logger.DebugContext(ctx, "resolved org.federation.Post", slog.Any("org.federation.Post", s.logvalue_Org_Federation_Post(ret)))
	return ret, nil
}

func (s *FederationService) logvalue_Org_Federation_CustomMessage(v *CustomMessage) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("msg", v.GetMsg()),
	)
}

func (s *FederationService) logvalue_Org_Federation_CustomMessageArgument(v *Org_Federation_CustomMessageArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("msg", v.Msg),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetPostResponse(v *GetPostResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("post", s.logvalue_Org_Federation_Post(v.GetPost())),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetPostResponseArgument(v *Org_Federation_GetPostResponseArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Org_Federation_LocalizedMessage(v *LocalizedMessage) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Org_Federation_LocalizedMessageArgument(v *Org_Federation_LocalizedMessageArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.Value),
	)
}

func (s *FederationService) logvalue_Org_Federation_Post(v *Post) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("title", v.GetTitle()),
	)
}

func (s *FederationService) logvalue_Org_Federation_PostArgument(v *Org_Federation_PostArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}
