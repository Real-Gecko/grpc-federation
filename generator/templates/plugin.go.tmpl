{{- define "plugin" }}
{{- range . }}
{{ $pluginName := .PluginName }}
{{ $pluginFunctions := .PluginFunctions }}
type {{ $pluginName }} interface {
	{{- range $pluginFunctions }}
	{{ .Name }}(context.Context, {{- range .Args }}{{ .Type }},{{- end }}) ({{- .Return.Type }}, error)
	{{- end }}
}

var (
	reg_{{ $pluginName }} {{ $pluginName }}
	mu_{{ $pluginName }} grpcfed.RWMutex
)

func Register{{ $pluginName }}(plug {{ $pluginName }}) {
	mu_{{ $pluginName }}.Lock()
	defer mu_{{ $pluginName }}.Unlock()
	reg_{{ $pluginName }} = plug
}

{{ range $pluginFunctions }}
//export {{ .ExportName }}
func {{ .ExportName }}(mdptr uint32, mdsize uint32, {{- range .WasmArgs }}{{ .Name }} {{ .Type }},{{- end }}) grpcfed.ReturnValue {
	var md metadata.MD
	if err := json.Unmarshal(grpcfed.ToBytes(mdptr, mdsize), &md); err != nil {
		return grpcfed.ErrorToReturnValue(err)
	}
	ctx := metadata.NewIncomingContext(context.Background(), md)
	{{- range .WasmArgs }}
	{{- if not .Skip }}
	converted_{{ .Name }} := {{ .ConvertProcess }}
	{{- end }}
	{{- end }}

	mu_{{ $pluginName }}.RLock()
	ret, err := reg_{{ $pluginName }}.{{ .Name }}(ctx, {{- range .WasmArgs }}{{- if not .Skip }}converted_{{ .Name }},{{- end }}{{- end }})
	mu_{{ $pluginName }}.RUnlock()
	if err != nil {
		return grpcfed.ErrorToReturnValue(err)
	}
	return grpcfed.{{ .Return.FuncName }}ToReturnValue(ret)
}
{{ end }}
{{- end }}
{{- end }}
