{{- define "callResolver" }}
{{- if .Resolver.UseIf }}
valueMu.RLock()
ifValue, err := grpcfed.EvalCEL(s.env, "{{ .Resolver.If }}", envOpts, evalValues, reflect.TypeOf(false))
valueMu.RUnlock()
if err != nil {
	grpcfed.RecordErrorToSpan({{ .Ctx }}, err)
	return nil, err
}
if !ifValue.(bool) {
	return {{ .Resolver.ZeroValue }}, nil
}
{{- end }}
{{- if .Resolver.IsValidation }}
{{- template "messageValidation" .Resolver.MessageValidation }}
{{- else }}
valueMu.RLock()
{{- $arguments := .Resolver.Arguments }}
{{- if .Resolver.UseArgs }}
args := &{{ .Resolver.RequestType }}{
	{{- range $arguments }}
	{{- if not .CEL }}
	{{ .Name }}: {{ .Value }}, {{ .ProtoComment }}
	{{- end }}
	{{- end }}
}
{{- end }}
{{- $ctx := .Ctx }}
{{- range $arguments }}
{{- if .CEL }}
{{ .ProtoComment }}
{
	value, err := grpcfed.EvalCEL(s.env, "{{ .CEL.Expr }}", envOpts, evalValues, reflect.TypeOf({{ .ZeroValue }}))
	if err != nil {
		valueMu.RUnlock()
		grpcfed.RecordErrorToSpan({{ $ctx }}, err)
		return nil, err
	}
	{{- if ne (len .InlineFields) 0 }}
	inlineValue := {{ .Value }}
	{{- range .InlineFields }}
	args.{{ .Name }} = {{ .Value }}
	{{- end }}
	{{- else }}
	args.{{ .Name }} = {{ .Value }}
	{{- end }}
}
{{- end }}
{{- end }}
valueMu.RUnlock()
{{- if .Resolver.UseTimeout }}
return grpcfed.WithTimeout[{{ .Resolver.ReturnType }}]({{ .Ctx }}, "{{ .Resolver.MethodFQDN }}", {{ .Resolver.Timeout }}, func({{ .Ctx }} context.Context) (*{{ .Resolver.ReturnType }}, error) {
	{{- if .Resolver.UseRetry }}
	{{- template "retry" (map "Ctx" .Ctx "Retry" .Resolver.Retry) }}
	return grpcfed.WithRetry[{{ .Resolver.ReturnType }}](b, func() (*{{ .Resolver.ReturnType }}, error) {
		return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
	})
	{{- else }}
	return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
	{{- end }}
})
{{- else if .Resolver.UseRetry }}
{{- template "retry" (map "Ctx" .Ctx "Retry" .Resolver.Retry) }}
return grpcfed.WithRetry[{{ .Resolver.ReturnType }}](b, func() (*{{ .Resolver.ReturnType }}, error) {
	return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
})
{{- else if .Resolver.IsBy }}
{{- $by := .Resolver.By }}
valueMu.RLock()
value, err := grpcfed.EvalCEL(s.env, "{{ $by.Expr }}", envOpts, evalValues, reflect.TypeOf({{ .Resolver.ZeroValue }}))
valueMu.RUnlock()
return value, err
{{- else if .Resolver.IsMap }}
{{- $mapResolver := .Resolver.MapResolver }}
env, err := s.env.Extend(cel.Variable("{{ $mapResolver.IteratorName }}", {{ $mapResolver.IteratorCELType }}))
if err != nil {
	grpcfed.RecordErrorToSpan({{ .Ctx }}, err)
	return nil, err
}
valueMu.RLock()
defer valueMu.RUnlock()
var value {{ $mapResolver.MapOutType }}
for _, iter := range {{ $mapResolver.IteratorSource }} {
	iterValues := make(map[string]any)
	for k, v := range evalValues {
		iterValues[k] = v
	}
	iterValues["{{ $mapResolver.IteratorName }}"] = iter

	{{- if $mapResolver.IsBy }}
	{{- $by := $mapResolver.MapExpr.Expr.By }}
	resultValue, err := grpcfed.EvalCEL(env, "{{ $by.Expr }}", envOpts, iterValues, reflect.TypeOf({{ $mapResolver.IteratorZeroValue }}))
	if err != nil {
		grpcfed.RecordErrorToSpan({{ .Ctx }}, err)
		return nil, err
	}
	iterValue := resultValue.({{ $mapResolver.IteratorType }})
	{{- else if $mapResolver.IsMessage }}
	{{- $arguments := $mapResolver.Arguments }}
	args := &{{ $mapResolver.RequestType }}{
		{{- range $arguments }}
		{{- if not .CEL }}
		{{ .Name }}: {{ .Value }}, {{ .ProtoComment }}
		{{- end }}
		{{- end }}
	}
	{{- $ctx := .Ctx }}
	{{- range $arguments }}
	{{- if .CEL }}
	{{ .ProtoComment }}
	{
		value, err := grpcfed.EvalCEL(env, "{{ .CEL.Expr }}", envOpts, iterValues, reflect.TypeOf({{ .ZeroValue }}))
		if err != nil {
			grpcfed.RecordErrorToSpan({{ $ctx }}, err)
			return nil, err
		}
		{{- if ne (len .InlineFields) 0 }}
		inlineValue := {{ .Value }}
		{{- range .InlineFields }}
		args.{{ .Name }} = {{ .Value }}
		{{- end }}
		{{- else }}
		args.{{ .Name }} = {{ .Value }}
		{{- end }}
	}
	{{- end }}
	{{- end }}
	iterValue, err := s.{{ $mapResolver.Caller }}({{ .Ctx }}, args)
	if err != nil {
		grpcfed.RecordErrorToSpan({{ $ctx }}, err)
		return nil, err
	}
	{{- end }}
	value = append(value, iterValue)
}
return value, nil
{{- else }}
return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
{{- end }}
{{- end }}
{{- end }}

{{- define "messageResolver" }}
// This section's codes are generated by the following proto definition.
/*
{{ .Resolver.ProtoComment }}
*/
{
	{{- if .Resolver.UseResponseVariable }}
	valueIface, err, _ := sg.Do("{{- .Resolver.Key }}", func() (any, error) {
		{{- template "callResolver" (map "Ctx" .Ctx "Resolver" .Resolver) }}
	})
	if err != nil {
		{{- template "errorHandler" (map "Ctx" .Ctx "Resolver" .Resolver) }}
	}
	value := valueIface.({{ .Resolver.Type }})
	{{- else }}
	if _, err, _ := sg.Do("{{- .Resolver.Key }}", func() (any, error) {
		{{- template "callResolver" (map "Ctx" .Ctx "Resolver" .Resolver) }}
	}); err != nil {
		{{- template "errorHandler" (map "Ctx" .Ctx "Resolver" .Resolver) }}
	}
	{{- end }}

	{{- $responseVariable := .Resolver.ResponseVariable }}
	{{- if $responseVariable }}
	valueMu.Lock()
	{{- end }}

	{{- $hasCELValue := .Resolver.Message.HasCELValue }}
	{{- if $responseVariable }}
	{{ $responseVariable.Name }} = value
	{{- if $hasCELValue }}
	envOpts = append(envOpts, cel.Variable("{{ $responseVariable.CELExpr }}", {{ $responseVariable.CELType }}))
	evalValues["{{ $responseVariable.CELExpr }}"] = {{ $responseVariable.Name }}
	{{- end }}
	{{- end }}

	{{- if $responseVariable }}
	valueMu.Unlock()
	{{- end }}
}
{{- end }}

{{- define "resolverGroup" }}
{{- if .Resolver.IsConcurrent }}
eg, {{ printf "ctx%d" .Level }} := errgroup.WithContext({{ parentCtx .Level }})
{{- range .Resolver.Starts }}
grpcfed.GoWithRecover(eg, func() (any, error) {
	{{- template "resolverGroup" (map "Level" (add $.Level 1) "Resolver" .) }}
	return nil, nil
})
{{- end }}
if err := eg.Wait(); err != nil {
	grpcfed.RecordErrorToSpan({{ printf "ctx%d" .Level }}, err)
	return nil, err
}
{{- if .Resolver.ExistsEnd }}
{{ template "messageResolver" (map "Ctx" (parentCtx .Level) "Resolver" .Resolver.End) }}
{{- end }}

{{- else }}

{{- if .Resolver.ExistsStart }}
{{ template "resolverGroup" (map "Level" .Level "Resolver" .Resolver.Start) }}
{{- end }}

{{- if .Resolver.ExistsEnd }}
{{ template "messageResolver" (map "Ctx" (parentCtx .Level) "Resolver" .Resolver.End) }}
{{- end }}

{{- end }}
{{- end }}
