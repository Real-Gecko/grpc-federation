// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
package {{ .OutputPackageName }}

import (
	"context"
	"fmt"
	"strings"
	"sync"
	"time"
	"runtime/debug"
	"log/slog"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	"github.com/cenkalti/backoff/v4"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/known/dynamicpb"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/durationpb"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"golang.org/x/sync/errgroup"
	"golang.org/x/sync/singleflight"
	"github.com/google/cel-go/cel"
	"github.com/google/cel-go/common/types/ref"
	celtypes "github.com/google/cel-go/common/types"
	grpccodes "google.golang.org/grpc/codes"
	grpcstatus "google.golang.org/grpc/status"

	{{ range .Imports }}
	{{ .Alias }} "{{ .Path }}"
	{{- end }}
)

{{- $serviceName := .ServiceName }}
{{- $serviceDependencies := .ServiceDependencies }}
{{- $customResolvers := .CustomResolvers }}

// {{ $serviceName }}Config configuration required to initialize the service that use GRPC Federation.
type {{ $serviceName }}Config struct {
	{{- if $serviceDependencies }}
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client {{ $serviceName }}ClientFactory // required
	{{- end }}
	{{- if $customResolvers }}
	// Resolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
	// If this interface is not provided, an error is returned during initialization.
	Resolver {{ $serviceName }}Resolver // required
	{{- end }}
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler {{ $serviceName }}ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// {{ $serviceName }}ClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type {{ $serviceName }}ClientFactory interface {
	{{- range $serviceDependencies }}
	// {{ .ClientName }} create a gRPC Client to be used to call methods in {{ .ServiceName }}.
	{{ .ClientName }}({{ $serviceName }}ClientConfig) ({{ .ClientType }}, error)
	{{- end }}
}

// {{ $serviceName }}ClientConfig information set in `dependencies` of the `grpc.federation.service` option.
// Hints for creating a gRPC Client.
type {{ $serviceName }}ClientConfig struct {
	// Service returns the name of the service on Protocol Buffers.
	Service string
	// Name is the value set for `name` in `dependencies` of the `grpc.federation.service` option.
	// It must be unique among the services on which the Federation Service depends.
	Name string
}

// {{ $serviceName }}DependencyServiceClient has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type {{ $serviceName }}DependencyServiceClient struct {
	{{- range $serviceDependencies }}
	{{ .ClientName }} {{ .ClientType }}
	{{- end }}
}

// {{ $serviceName }}Resolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type {{ $serviceName }}Resolver interface {
	{{- range $customResolvers }}
	// {{ .Name }} implements resolver for "{{ .ProtoFQDN }}".
	{{ .Name }}(context.Context, *{{ .RequestType }}) ({{ .ReturnType }}, error)
	{{- end }}
}

// {{ $serviceName }}UnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type {{ $serviceName }}UnimplementedResolver struct {}

{{- range $customResolvers }}
// {{ .Name }} resolve "{{ .ProtoFQDN }}".
// This method always returns Unimplemented error.
func ({{ $serviceName }}UnimplementedResolver) {{ .Name }}(context.Context, *{{ .RequestType }}) (ret {{ .ReturnType }}, e error) {
	e = grpcstatus.Errorf(grpccodes.Unimplemented, "method {{ .Name }} not implemented")
	return
}
{{- end }}

// {{ $serviceName }}ErrorHandler Federation Service often needs to convert errors received from downstream services.
// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
type {{ $serviceName }}ErrorHandler func(ctx context.Context, methodName string, err error) error

{{- $dependentMethods := .DependentMethods }}
{{- if $dependentMethods }}
const (
	{{- range $dependentMethods }}
	{{ $serviceName }}_DependentMethod_{{ .Name }} = "{{ .FQDN }}"
	{{- end }}
)
{{- end }}

// {{ $serviceName }}RecoveredError represents recovered error.
type {{ $serviceName }}RecoveredError struct {
	Message string
	Stack []string
}

func (e *{{ $serviceName }}RecoveredError) Error() string {
	return fmt.Sprintf("recovered error: %s", e.Message)
}

// {{ $serviceName }} represents Federation Service.
type {{ $serviceName }} struct {
	*Unimplemented{{ $serviceName }}Server
	cfg {{ $serviceName }}Config
	logger *slog.Logger
	errorHandler {{ $serviceName }}ErrorHandler
	env *cel.Env
	{{- if $customResolvers }}
	resolver {{ $serviceName }}Resolver
	{{- end }}
	client *{{ $serviceName }}DependencyServiceClient
}

{{- range .Types }}

// {{ .Desc }}.
type {{ .Name }} struct {
	{{- range .Fields }}
	{{- if .Name }}
	{{ .Name }} {{ .Type }}
	{{- else }}
	{{ .Type }}
	{{- end }}
	{{- end }}
	Client *{{ $serviceName }}DependencyServiceClient
}

{{- end }}

// FederationServiceCELTypeHelper
type FederationServiceCELTypeHelper struct {
	celRegistry    *celtypes.Registry
	structFieldMap map[string]map[string]*celtypes.FieldType
	mapMu          sync.RWMutex
}

func (h *FederationServiceCELTypeHelper) TypeProvider() celtypes.Provider {
	return h
}

func (h *FederationServiceCELTypeHelper) TypeAdapter() celtypes.Adapter {
	return h.celRegistry
}

func (h *FederationServiceCELTypeHelper) EnumValue(enumName string) ref.Val {
	return h.celRegistry.EnumValue(enumName)
}

func (h *FederationServiceCELTypeHelper) FindIdent(identName string) (ref.Val, bool) {
	return h.celRegistry.FindIdent(identName)
}

func (h *FederationServiceCELTypeHelper) FindStructType(structType string) (*celtypes.Type, bool) {
	if st, found := h.celRegistry.FindStructType(structType); found {
		return st, found
	}
	h.mapMu.RLock()
	defer h.mapMu.RUnlock()
	if _, exists := h.structFieldMap[structType]; exists {
		return celtypes.NewObjectType(structType), true
	}
	return nil, false
}

func (h *FederationServiceCELTypeHelper) FindStructFieldNames(structType string) ([]string, bool) {
	if names, found := h.celRegistry.FindStructFieldNames(structType); found {
		return names, found
	}

	h.mapMu.RLock()
	defer h.mapMu.RUnlock()
	fieldMap, exists := h.structFieldMap[structType]
	if !exists {
		return nil, false
	}
	fieldNames := make([]string, 0, len(fieldMap))
	for fieldName := range fieldMap {
		fieldNames = append(fieldNames, fieldName)
	}
	sort.Strings(fieldNames)
	return fieldNames, true
}

func (h *FederationServiceCELTypeHelper) FindStructFieldType(structType, fieldName string) (*celtypes.FieldType, bool) {
	if field, found := h.celRegistry.FindStructFieldType(structType, fieldName); found {
		return field, found
	}

	h.mapMu.RLock()
	defer h.mapMu.RUnlock()
	fieldMap, exists := h.structFieldMap[structType]
	if !exists {
		return nil, false
	}
	field, found := fieldMap[fieldName]
	return field, found
}

func (h *FederationServiceCELTypeHelper) NewValue(structType string, fields map[string]ref.Val) ref.Val {
	return h.celRegistry.NewValue(structType, fields)
}

func newFederationServiceCELTypeHelper() *FederationServiceCELTypeHelper {
	celRegistry := celtypes.NewEmptyRegistry()
	protoregistry.GlobalFiles.RangeFiles(func(f protoreflect.FileDescriptor) bool {
		if err := celRegistry.RegisterDescriptor(f); err != nil {
			return false
		}
		return true
	})
	newFieldType := func(typ *celtypes.Type, fieldName string) *celtypes.FieldType {
		isSet := func(v any, fieldName string) bool {
			rv := reflect.ValueOf(v)
			if rv.Kind() == reflect.Pointer {
				rv = rv.Elem()
			}
			if rv.Kind() != reflect.Struct {
				return false
			}
			return rv.FieldByName(fieldName).IsValid()
		}
		getFrom := func(v any, fieldName string) (any, error) {
			rv := reflect.ValueOf(v)
			if rv.Kind() == reflect.Pointer {
				rv = rv.Elem()
			}
			if rv.Kind() != reflect.Struct {
				return nil, fmt.Errorf("%T is not struct type", v)
			}
			value := rv.FieldByName(fieldName)
			return value.Interface(), nil
		}
		return &celtypes.FieldType{
			Type: typ,
			IsSet: func(v any) bool {
				return isSet(v, fieldName)
			},
			GetFrom: func(v any) (any, error) {
				return getFrom(v, fieldName)
			},
		}
	}
	return &FederationServiceCELTypeHelper{
		celRegistry: celRegistry,
		structFieldMap: map[string]map[string]*celtypes.FieldType{
			{{- range .Types }}
			{{- if .ProtoFQDN }}
			"{{ .ProtoFQDN }}": map[string]*celtypes.FieldType{
				{{- if .ProtoFields }}
				{{- range .ProtoFields }}
				"{{ .Name }}": newFieldType({{ .TypeDeclare }}, "{{ .FieldName }}"),
				{{- end }}
				{{- end }}
			},
			{{- end }}
			{{- end }}
		},
	}
}

// New{{ $serviceName }} creates {{ $serviceName }} instance by {{ $serviceName }}Config.
func New{{ $serviceName }}(cfg {{ $serviceName }}Config) (*{{ $serviceName }}, error) {
	if err := validate{{ $serviceName }}Config(cfg); err != nil {
		return nil, err
	}
	{{- range $serviceDependencies }}
	{{ .ClientName }}, err := cfg.Client.{{ .ClientName }}({{ $serviceName }}ClientConfig{
		Service: "{{ .ServiceName }}",
		Name: "{{ .NameConfig }}",
	})
	if err != nil {
		return nil, err
	}
	{{- end }}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celHelper := newFederationServiceCELTypeHelper()
	env, err := cel.NewCustomEnv(
		cel.StdLib(),
		cel.CustomTypeAdapter(celHelper.TypeAdapter()),
		cel.CustomTypeProvider(celHelper.TypeProvider()),
	)
	if err != nil {
		return nil, err
	}
	return &{{ $serviceName }}{
		cfg: cfg,
		logger: logger,
		errorHandler: errorHandler,
		env: env,
		{{- if $customResolvers }}
		resolver: cfg.Resolver,
		{{- end }}
		client: &{{ $serviceName}}DependencyServiceClient{
			{{- range $serviceDependencies }}
			{{ .ClientName }}: {{ .ClientName }},
			{{- end }}
		},
	}, nil
}

func validate{{ $serviceName }}Config(cfg {{ $serviceName }}Config) error {
	{{- if $serviceDependencies }}
	if cfg.Client == nil {
		return fmt.Errorf("Client field in {{ $serviceName }}Config is not set. this field must be set")
	}
	{{- end }}
	{{- if $customResolvers }}
	if cfg.Resolver == nil {
		return fmt.Errorf("Resolver field in {{ $serviceName }}Config is not set. this field must be set")
	}
	{{- end }}
	return nil
}

func withTimeout{{ $serviceName }}[T any](ctx context.Context, method string, timeout time.Duration, fn func(context.Context) (*T, error)) (*T, error) {
	ctx, cancel := context.WithTimeout(ctx, timeout)
	defer cancel()

	var (
		ret *T
		errch = make(chan error)
	)
	go func() {
		defer func() {
			if r := recover(); r != nil {
				errch <- recoverError{{ $serviceName }}(r, debug.Stack())
			}
		}()

		res, err := fn(ctx)
		ret = res
		errch <- err
	}()
	select {
	case <-ctx.Done():
		status := grpcstatus.New(grpccodes.DeadlineExceeded, ctx.Err().Error())
		withDetails, err := status.WithDetails(&errdetails.ErrorInfo{
			Metadata: map[string]string{
				"method": method,
				"timeout": timeout.String(),
			},
		})
		if err != nil {
			return nil, status.Err()
		}
		return nil, withDetails.Err()
	case err := <- errch:
		return ret, err
	}
}

func withRetry{{ $serviceName }}[T any](b backoff.BackOff, fn func() (*T, error)) (*T, error) {
	var res *T
	if err := backoff.Retry(func() (err error) {
		res, err = fn()
		return
	}, b); err != nil {
		return nil, err
	}
	return res, nil
}

func recoverError{{ $serviceName }}(v interface{}, rawStack []byte) *{{ $serviceName }}RecoveredError {
	msg := fmt.Sprint(v)
	lines := strings.Split(msg, "\n")
	if len(lines) <= 1 {
		lines := strings.Split(string(rawStack), "\n")
		stack := make([]string, 0, len(lines))
		for _, line := range lines {
			if line == "" {
				continue
			}
			stack = append(stack, strings.TrimPrefix(line, "\t"))
		}
		return &{{ $serviceName }}RecoveredError{
			Message: msg,
			Stack:   stack,
		}
	}
	// If panic occurs under singleflight, singleflight's recover catches the error and gives a stack trace.
	// Therefore, once the stack trace is removed.
	stack := make([]string, 0, len(lines))
	for _, line := range lines[1:] {
		if line == "" {
			continue
		}
		stack = append(stack, strings.TrimPrefix(line, "\t"))
	}
	return &{{ $serviceName }}RecoveredError{
		Message: lines[0],
		Stack:   stack,
	}
}

func (s *{{ $serviceName }}) evalCEL(expr string, vars []cel.EnvOption, args map[string]any, outType reflect.Type) (any, error) {
	env, err := s.env.Extend(vars...)
	if err != nil {
		return nil, err
	}
	expr = strings.Replace(expr, "$", grpcfed.MessageArgumentVariableName, -1)
	ast, iss := env.Compile(expr)
	if iss.Err() != nil {
		return nil, iss.Err()
	}
	program, err := env.Program(ast)
	if err != nil {
		return nil, err
	}
	out, _, err := program.Eval(args)
	if err != nil {
		return nil, err
	}
	if outType != nil {
		return out.ConvertToNative(outType)
	}
	return out.Value(), nil
}

func (s *{{ $serviceName }}) goWithRecover(eg *errgroup.Group, fn func() (interface{}, error)) {
	eg.Go(func() (e error) {
		defer func() {
			if r := recover(); r != nil {
				e = recoverError{{ $serviceName }}(r, debug.Stack())
			}
		}()
		_, err := fn()
		return err
	})
}

func (s *{{ $serviceName }}) outputErrorLog(ctx context.Context, err error) {
	if err == nil {
		return
	}
	if status, ok := grpcstatus.FromError(err); ok {
		s.logger.ErrorContext(ctx, status.Message(),
			slog.Group("grpc_status",
				slog.String("code", status.Code().String()),
				slog.Any("details", status.Details()),
			),
		)
		return
	}
	var recoveredErr *{{ $serviceName }}RecoveredError
	if errors.As(err, &recoveredErr) {
		trace := make([]interface{}, 0, len(recoveredErr.Stack))
		for idx, stack := range recoveredErr.Stack {
			trace = append(trace, slog.String(fmt.Sprint(idx+1), stack))
		}
		s.logger.ErrorContext(ctx, recoveredErr.Message, slog.Group("stack_trace", trace...))
		return
	}
	s.logger.ErrorContext(ctx, err.Error())
}

{{- range .Methods }}

// {{ .Name }} implements "{{ .ProtoFQDN }}" method.
func (s *{{ $serviceName }}) {{ .Name }}(ctx context.Context, req {{ .RequestType }}) (res {{ .ReturnType }}, e error) {
	defer func() {
		if r := recover(); r != nil {
			e = recoverError{{ $serviceName }}(r, debug.Stack())
			s.outputErrorLog(ctx, e)
		}
	}()
	{{- if .UseTimeout }}
	res, err := withTimeout{{ $serviceName }}[{{ .ReturnTypeWithoutPtr }}](ctx, "{{ .ProtoFQDN }}", {{ .Timeout }}, func(ctx context.Context) ({{ .ReturnType }}, error) {
		return s.{{ .ResolverName }}(ctx, &{{ .ArgumentName }}{
			Client: s.client,
			{{- range .ReturnTypeArguments }}
			{{ . }}: req.{{ . }},
			{{- end }}
		})
	})
	{{- else }}
	res, err := s.{{ .ResolverName }}(ctx, &{{ .ArgumentName }}{
		Client: s.client,
		{{- range .ReturnTypeArguments }}
		{{ . }}: req.{{ . }},
		{{- end }}
	})
	{{- end }}
	if err != nil {
		s.outputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

{{- end }}

{{- range .Messages }}
{{ if .HasRule }}
// {{ .ResolverName }} resolve "{{ .ProtoFQDN }}" message.
func (s *{{ $serviceName }}) {{ .ResolverName }}(ctx context.Context, req *{{ .RequestType }}) (*{{ .ReturnType }}, error) {
	s.logger.DebugContext(ctx, "resolve  {{ .ProtoFQDN }}", slog.Any("message_args", s.logvalue_{{ .RequestType }}(req)))
	{{- $declVariables := .DeclVariables }}
	{{- if $declVariables }}
	var (
		{{- range $declVariables }}
		{{ .Name }} {{ .Type }}
		{{- end }}
	)
	{{- end }}
	{{- if .HasCELValue }}
	envOpts := []cel.EnvOption{cel.Variable(grpcfed.MessageArgumentVariableName, cel.ObjectType("{{ .RequestProtoType }}"))}
	evalValues := map[string]any{grpcfed.MessageArgumentVariableName: req}
	{{- end }}

	{{- $depGraph := .DependencyGraph }}
	{{- if $depGraph }}
// A tree view of message dependencies is shown below.
/*
{{ $depGraph }}*/
	{{- end }}
	{{- $msgResolvers := .MessageResolvers }}
	{{- $msgResolversLen := len $msgResolvers }}
	{{- if eq $msgResolversLen 1 }}
	{{- template "resolverGroup" (map "Level" 1 "Resolver" (index $msgResolvers 0)) }}
	{{- else }}
	{{- if $msgResolvers }}
	eg, ctx1 := errgroup.WithContext(ctx)
	{{- end }}
	{{ range $msgResolvers }}
	s.goWithRecover(eg, func() (interface{}, error) {
		{{- template "resolverGroup" (map "Level" 2 "Resolver" .) }}
		return nil, nil
	})
	{{ end }}
	{{- if $msgResolvers }}
	if err := eg.Wait(); err != nil {
		return nil, err
	}
	{{- end }}
	{{- end }}

	{{- $customResolverArguments := .CustomResolverArguments }}
	{{- if $customResolverArguments }}

	// assign named parameters to message arguments to pass to the custom resolver.
	{{- end }}
	{{- range $customResolverArguments }}
	req.{{ .Name }} = {{ .Value }}
	{{- end }}

	// create a message value to be returned.
	{{- $hasMsgCustomResolver := .HasCustomResolver }}
	{{- if $hasMsgCustomResolver }}
	// `custom_resolver = true` in "grpc.federation.message" option.
	ret, err := s.resolver.{{ .CustomResolverName }}(ctx, req)
	if err != nil {
		return nil, err
	}
	{{- else }}
	ret := &{{ .ReturnType }}{}
	{{- end }}

	{{- $returnFields := .ReturnFields }}
	{{- if $returnFields }}

	// field binding section.
	{{- end }}
	{{- range $returnFields }}
	{{- if .IsCustomResolverField }}
	{
		// (grpc.federation.field).custom_resolver = true
		var err error
		ret.{{ .Name }}, err = s.resolver.{{ .ResolverName }}(ctx, &{{ .RequestType }}{
			Client: s.client,
			{{ .MessageArgumentName }}: req,
			{{- if $hasMsgCustomResolver }}
			{{ .MessageName }}: ret,
			{{- end }}
		})
		if err != nil {
			return nil, err
		}
	}
	{{- else if .IsOneofField }}
	{{ $name := .Name }}
	switch {
	{{- range .OneofFields }}
	case {{ .Value }} != nil:
		ret.{{ $name }} = {{ .Value }}
	{{- end }}
	}
	{{- else if .CEL }}
	{{ .ProtoComment }}
	{
		_value, err := s.evalCEL("{{ .CEL.Expr }}", envOpts, evalValues, {{ .OutType }})
		if err != nil {
			return nil, err
		}
		ret.{{ .Name }} = {{ .Value }}
	}
	{{- else }}
	ret.{{ .Name }} = {{ .Value }} {{ .ProtoComment }}
	{{- end }}
	{{- end }}

	s.logger.DebugContext(ctx, "resolved {{ .ProtoFQDN }}", slog.Any("{{ .ProtoFQDN }}", s.logvalue_{{ .LogValueReturnType }}(ret)))
	return ret, nil
}
{{ range .CastFields }}
// {{ .Name }} cast from "{{ .RequestProtoFQDN }}" to "{{ .ResponseProtoFQDN }}".
func (s *{{ $serviceName }}) {{ .Name }}(from {{ .RequestType }}) {{ .ResponseType }} {
	{{- if .IsSlice }}
	{{- template "castRepeated" .ToSlice }}
    {{- else if .IsOneof }}
    {{- template "castOneof" .ToOneof }}
	{{- else if .IsStruct }}
	{{- template "castMessage" .ToStruct }}
	{{- else if .IsEnum }}
	{{- template "castEnum" .ToEnum }}
	{{- else }}
	return {{ .ResponseType }}(from)
	{{- end }}
}
{{ end }}
{{ end }}
{{- end }}
{{ range .LogValues }}
{{- if .IsRepeated }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key: fmt.Sprint(idx),
			Value: s.{{ .Value }}(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
{{- else if .IsMap }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key: fmt.Sprint(key),
			Value: {{ .Value }},
		})
	}
	return slog.GroupValue(attrs...)
}
{{- else if .IsMessage }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		{{- range .Attrs }}
		slog.{{ .Type }}("{{ .Key }}", {{ .Value }}),
		{{- end }}
	)
}
{{- else }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	switch v {
	{{- range .Attrs }}
	case {{ .Value }}:
	return slog.StringValue("{{ .Key }}")
	{{- end }}
	}
	return slog.StringValue("")
}
{{- end }}
{{ end }}

{{- define "castRepeated" }}
ret := make({{ .ResponseType }}, 0, len(from))
for _, v := range from {
	{{- if .ElemRequiredCast }}
	ret = append(ret, s.{{ .ElemCastName }}(v))
	{{- else }}
	ret = append(ret, v)
	{{- end }}
}
return ret
{{- end }}

{{- define "castMessage" }}
if from == nil {
	return nil
}
{{ $oneofFields := .Oneofs }}
{{- if $oneofFields }}
ret := &{{ .Name }}{
	{{- range .Fields }}

	{{- if .RequiredCast }}
	{{ .ToFieldName }}: s.{{ .CastName }}(from.Get{{ .FromFieldName }}()),
	{{- else }}
	{{ .ToFieldName }}: from.Get{{ .FromFieldName }}(),
	{{- end }}

	{{- end }}
}
{{- range .Oneofs }}
switch {
	{{ $name := .Name }}
	{{- range .Fields }}
	case from.Get{{ .FromFieldName }}() != nil:
	{{- if .RequiredCast }}
	ret.{{ $name }} = s.{{ .CastName }}(from.Get{{ .FromFieldName }}())
	{{- else }}
	ret.{{ $name }} = from.Get{{ .FromFieldName }}()
	{{- end }}
	{{- end }}
}
{{- end }}
return ret

{{- else }}

return &{{ .Name }}{
	{{- range .Fields }}

	{{- if .RequiredCast }}
	{{ .ToFieldName }}: s.{{ .CastName }}(from.Get{{ .FromFieldName }}()),
	{{- else }}
	{{ .ToFieldName }}: from.Get{{ .FromFieldName }}(),
	{{- end }}

	{{- end }}
}

{{- end }}
{{- end }}

{{- define "castOneof" }}
if from == nil {
	return nil
}
return &{{ .Name }}{
	{{- if .RequiredCast }}
	{{ .FieldName }}: s.{{ .CastName }}(from),
	{{- else }}
	{{ .FieldName }}: from,
	{{- end }}
}
{{- end }}

{{- define "castEnum" }}
switch from {
	{{- range .FromValues }}
	case {{ .FromValue }}:
	return {{ .ToValue }}
	{{- end }}
	{{- if .DefaultValue }}
	default:
	return {{ .DefaultValue }}
	{{- end }}
}
{{- end }}

{{- define "callResolver" }}
valueMu.RLock()
{{- $arguments := .Resolver.Arguments }}
args := &{{ .Resolver.RequestType }}{
	{{- range $arguments }}
	{{- if not .CEL }}
	{{ .Name }}: {{ .Value }}, {{ .ProtoComment }}
	{{- end }}
	{{- end }}
}
{{- range $arguments }}
{{- if .CEL }}
{{ .ProtoComment }}
{
	_value, err := s.evalCEL("{{ .CEL.Expr }}", envOpts, evalValues, {{ .OutType }})
	if err != nil {
		return nil, err
	}
	{{- if .CEL.Inline }}
	_inlineValue := {{ .Value }}
	{{- range .InlineFields }}
	args.{{ .Name }} = {{ .Value }}
	{{- end }}
	{{- else }}
	args.{{ .Name }} = {{ .Value }}
	{{- end }}
}
{{- end }}
{{- end }}
valueMu.RUnlock()
{{- if .Resolver.UseTimeout }}
return withTimeout{{ .Resolver.ServiceName }}[{{ .Resolver.ReturnType }}]({{ .Ctx }}, "{{ .Resolver.MethodFQDN }}", {{ .Resolver.Timeout }}, func(ctx context.Context) (*{{ .Resolver.ReturnType }}, error) {
	{{- if .Resolver.UseRetry }}
	{{- template "retry" (map "Ctx" .Ctx "Retry" .Resolver.MethodCall.Retry) }}
	return withRetry{{ .Resolver.ServiceName }}[{{ .Resolver.ReturnType }}](b, func() (*{{ .Resolver.ReturnType }}, error) {
		return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
	})
	{{- else }}
	return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
	{{- end }}
})
{{- else if .Resolver.UseRetry }}
{{- template "retry" (map "Ctx" .Ctx "Retry" .Resolver.MethodCall.Retry) }}
return withRetry{{ .Resolver.ServiceName }}[{{ .Resolver.ReturnType }}](b, func() (*{{ .Resolver.ReturnType }}, error) {
	return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
})
{{- else }}
return s.{{ .Resolver.Caller }}({{ .Ctx }}, args)
{{- end }}

{{- end }}

{{- define "retry" }}
{{- if .Retry.Constant }}
var b backoff.BackOff = backoff.NewConstantBackOff({{ .Retry.Constant.Interval.Nanoseconds }} /* {{ .Retry.Constant.Interval }} */)
{{- else }}
eb := backoff.NewExponentialBackOff()
eb.InitialInterval = {{ .Retry.Exponential.InitialInterval.Nanoseconds }} /* {{ .Retry.Exponential.InitialInterval }} */
eb.RandomizationFactor = {{ .Retry.Exponential.RandomizationFactor }}
eb.Multiplier = {{ .Retry.Exponential.Multiplier }}
eb.MaxInterval = {{ .Retry.Exponential.MaxInterval.Nanoseconds }} /* {{ .Retry.Exponential.MaxInterval }} */
eb.MaxElapsedTime = {{ .Retry.Exponential.MaxElapsedTime.Nanoseconds }} /* {{ .Retry.Exponential.MaxElapsedTime }} */

var b backoff.BackOff = eb
{{- end }}
{{- if .Retry.MaxRetries }}
b = backoff.WithMaxRetries(b, {{ .Retry.MaxRetries }})
{{- end }}
b = backoff.WithContext(b, {{ .Ctx }})
{{- end }}

{{- define "errorHandler" }}
{{- if .Resolver.HasErrorHandler }}
if err := s.errorHandler({{ .Ctx }}, {{ .Resolver.ServiceName }}_DependentMethod_{{ .Resolver.DependentMethodName }}, err); err != nil {
	return nil, err
}
{{- else }}
return nil, err
{{- end }}
{{- end }}

{{- define "messageResolver" }}
// This section's codes are generated by the following proto definition.
/*
{{ .Resolver.ProtoComment }}
*/
{{- if .Resolver.UseResponseVariable }}
{{ .Resolver.ResponseVariable }}Iface, err, _ := sg.Do("{{- .Resolver.Key }}", func() (interface{}, error) {
	{{- template "callResolver" (map "Ctx" .Ctx "Resolver" .Resolver) }}
})
if err != nil {
	{{- template "errorHandler" (map "Ctx" .Ctx "Resolver" .Resolver) }}
}
{{ .Resolver.ResponseVariable }} := {{ .Resolver.ResponseVariable }}Iface.({{ .Resolver.Type }})
{{- else }}
if _, err, _ := sg.Do("{{- .Resolver.Key }}", func() (interface{}, error) {
	{{- template "callResolver" (map "Ctx" .Ctx "Resolver" .Resolver) }}
}); err != nil {
	{{- template "errorHandler" (map "Ctx" .Ctx "Resolver" .Resolver) }}
}
{{- end }}

{{- $responseVariables := .Resolver.ResponseVariables }}
{{- if $responseVariables }}
valueMu.Lock()
{{- end }}

{{- range $responseVariables }}
{{- if .UseName }}
{{ .Name }} = {{ .Selector }} {{ .ProtoComment }}
envOpts = append(envOpts, cel.Variable("{{ .CELExpr }}", {{ .CELType }}))
evalValues["{{ .CELExpr }}"] = {{ .Name }}
{{- end }}
{{- end }}

{{- if $responseVariables }}
valueMu.Unlock()
{{- end }}


{{- end }}

{{- define "resolverGroup" }}
{{- if .Resolver.IsConcurrent }}
eg, {{ printf "ctx%d" .Level }} := errgroup.WithContext({{ parentCtx .Level }})
{{- range .Resolver.Starts }}
s.goWithRecover(eg, func() (interface{}, error) {
	{{- template "resolverGroup" (map "Level" (add $.Level 1) "Resolver" .) }}
	return nil, nil
})
{{- end }}
if err := eg.Wait(); err != nil {
	return nil, err
}
{{- if .Resolver.ExistsEnd }}
{{ template "messageResolver" (map "Ctx" (parentCtx .Level) "Resolver" .Resolver.End) }}
{{- end }}

{{- else }}

{{- if .Resolver.ExistsStart }}
{{ template "resolverGroup"  (map "Level" .Level "Resolver" .Resolver.Start) }}
{{- end }}

{{- if .Resolver.ExistsEnd }}
{{ template "messageResolver" (map "Ctx" (parentCtx .Level) "Resolver" .Resolver.End) }}
{{- end }}

{{- end }}
{{- end }}
