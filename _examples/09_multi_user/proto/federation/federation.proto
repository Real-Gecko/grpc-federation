syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";
import "user/user.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {
    dependencies: [
      { service: "user.UserService" }
    ]
  };
  rpc Get(GetRequest) returns (GetResponse) {};
}

message GetRequest {}

message GetResponse {
  option (grpc.federation.message) = {
    messages { name: "uid", message: "UserID" }
    messages { name: "user", message: "User", args { name: "user_id", by: "uid.value" } }
    messages { name: "user2", message: "User", args { name: "user_id", by: "uid.value" } }
  };
  User user = 1 [(grpc.federation.field).by = "user"];
  User user2 = 2 [(grpc.federation.field).by = "user2"];
}

message User {
  option (grpc.federation.message) = {
    resolver {
      method: "user.UserService/GetUser"
      request { field: "id", by: "$.user_id" }
      response { name: "user", field: "user", autobind: true  }
    }
    messages { message: "Sub" }
  };
  string id = 1;
  string name = 3 [(grpc.federation.field).custom_resolver = true];
}

message UserID {
  option (grpc.federation.message) = {
    messages { message: "Sub" }
  };

  string value = 1 [(grpc.federation.field).string = "xxx"];
}

message Sub {
  option (grpc.federation.message).custom_resolver = true;
}
