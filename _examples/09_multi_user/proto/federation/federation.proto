syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";
import "user/user.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc Get(GetRequest) returns (GetResponse) {};
}

message GetRequest {}

message GetResponse {
  option (grpc.federation.message) = {
    def { name: "uid", message { name: "UserID" } }
    def { name: "user", message { name: "User", args { name: "user_id", by: "uid.value" } } }
    def { name: "user2", message { name: "User", args { name: "user_id", by: "uid.value" } } }
  };
  User user = 1 [(grpc.federation.field).by = "user"];
  User user2 = 2 [(grpc.federation.field).by = "user2"];
}

message User {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "user.UserService/GetUser"
        request { field: "id", by: "$.user_id" }
      }
    }
    def { name: "user", by: "res.user", autobind: true }
    def { message { name: "Sub" } }
  };
  string id = 1;
  string name = 3 [(grpc.federation.field).custom_resolver = true];
}

message UserID {
  option (grpc.federation.message) = {
    def { message { name: "Sub" } }
  };

  string value = 1 [(grpc.federation.field).by = "'xxx'"];
}

message Sub {
  option (grpc.federation.message).custom_resolver = true;
}
