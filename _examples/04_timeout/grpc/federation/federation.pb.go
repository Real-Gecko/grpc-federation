// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: grpc/federation/federation.proto

package federation

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alias mapping between enums defined in other packages and enums defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<enum-name> ) to the enum.
	// If this definition exists, type conversion is automatically performed before the enum value assignment operation.
	// If a enum with this option has a value that is not present in the enum specified by alias, and the alias option is not specified for that value, an error is occurred.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnumRule) Reset() {
	*x = EnumRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRule) ProtoMessage() {}

func (x *EnumRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRule.ProtoReflect.Descriptor instead.
func (*EnumRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{0}
}

func (x *EnumRule) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type EnumValueRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specifies the default value of the enum.
	// All values other than those specified in alias will be default values.
	Default bool `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	// alias can be used when alias is specified in grpc.federation.enum option,
	// and specifies the value name to be referenced among the enums specified in alias of enum option.
	// multiple value names can be specified for alias.
	Alias []string `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnumValueRule) Reset() {
	*x = EnumValueRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueRule) ProtoMessage() {}

func (x *EnumValueRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueRule.ProtoReflect.Descriptor instead.
func (*EnumValueRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{1}
}

func (x *EnumValueRule) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *EnumValueRule) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

// ServiceRule define GRPC Federation rules for the service.
type ServiceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dependencies defines a unique name for all services on which federation service depends.
	// The name will be used when creating the gRPC client.
	Dependencies []*ServiceDependency `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ServiceRule) Reset() {
	*x = ServiceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRule) ProtoMessage() {}

func (x *ServiceRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRule.ProtoReflect.Descriptor instead.
func (*ServiceRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceRule) GetDependencies() []*ServiceDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// ServiceDependency assigns a uniquely determined name to the service.
type ServiceDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name to be used when initializing the gRPC client.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// service is the name of the dependent service.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ServiceDependency) Reset() {
	*x = ServiceDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDependency) ProtoMessage() {}

func (x *ServiceDependency) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDependency.ProtoReflect.Descriptor instead.
func (*ServiceDependency) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceDependency) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceDependency) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type MethodRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout string `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *MethodRule) Reset() {
	*x = MethodRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRule) ProtoMessage() {}

func (x *MethodRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRule.ProtoReflect.Descriptor instead.
func (*MethodRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{4}
}

func (x *MethodRule) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

// MessageRule define GRPC Federation rules for the message.
type MessageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resolver defines how to call methods to obtain the values needed to compose the message.
	Resolver *Resolver `protobuf:"bytes,1,opt,name=resolver,proto3" json:"resolver,omitempty"`
	// messages defines a list of dependent messages that must be retrieved to compose a message.
	Messages []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// if custom_resolver is true, the resolver for this message is implemented by Go.
	// If there are any values retrieved by resolver or messages, they are passed as arguments for custom resolver.
	// Each field of the message returned by the custom resolver is automatically bound.
	// If you want to change the binding process for a particular field, set `custom_resolver=true` option for that field.
	CustomResolver bool `protobuf:"varint,3,opt,name=custom_resolver,json=customResolver,proto3" json:"custom_resolver,omitempty"`
	// alias mapping between messages defined in other packages and messages defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<message-name> ) to the message.
	// If this definition exists, type conversion is automatically performed before the field assignment operation.
	// If a message with this option has a field that is not present in the message specified by alias, and the alias option is not specified for that field, an error is occurred.
	Alias string `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *MessageRule) Reset() {
	*x = MessageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRule) ProtoMessage() {}

func (x *MessageRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRule.ProtoReflect.Descriptor instead.
func (*MessageRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{5}
}

func (x *MessageRule) GetResolver() *Resolver {
	if x != nil {
		return x.Resolver
	}
	return nil
}

func (x *MessageRule) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessageRule) GetCustomResolver() bool {
	if x != nil {
		return x.CustomResolver
	}
	return false
}

func (x *MessageRule) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// Resolver define the gRPC method, how to call it, and which value to use in the return value.
type Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method specify the FQDN for the gRPC method. format is `<package-name>.<service-name>/<method-name>`.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// request specify request parameters for the gRPC method.
	Request []*MethodRequest `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
	// response specify which value in the gRPC method response is referenced by which name.
	Response []*MethodResponse `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty"`
	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout string `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// retry specifies the retry policy if the method call fails.
	Retry *RetryPolicy `protobuf:"bytes,5,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *Resolver) Reset() {
	*x = Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolver) ProtoMessage() {}

func (x *Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolver.ProtoReflect.Descriptor instead.
func (*Resolver) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{6}
}

func (x *Resolver) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Resolver) GetRequest() []*MethodRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Resolver) GetResponse() []*MethodResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Resolver) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *Resolver) GetRetry() *RetryPolicy {
	if x != nil {
		return x.Retry
	}
	return nil
}

// RetryPolicy define the retry policy if the method call fails.
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*RetryPolicy_Constant
	//	*RetryPolicy_Exponential
	Policy isRetryPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{7}
}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *RetryPolicy) GetConstant() *RetryPolicyConstant {
	if x, ok := x.GetPolicy().(*RetryPolicy_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *RetryPolicy) GetExponential() *RetryPolicyExponential {
	if x, ok := x.GetPolicy().(*RetryPolicy_Exponential); ok {
		return x.Exponential
	}
	return nil
}

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Constant struct {
	// retry according to the "constant" policy.
	Constant *RetryPolicyConstant `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}

type RetryPolicy_Exponential struct {
	// retry according to the "exponential backoff" policy.
	// The following Go library is used in the implementation,
	// so please refer to the library documentation for how to specify each parameter.
	// https://pkg.go.dev/github.com/cenkalti/backoff/v4#section-readme.
	Exponential *RetryPolicyExponential `protobuf:"bytes,2,opt,name=exponential,proto3,oneof"`
}

func (*RetryPolicy_Constant) isRetryPolicy_Policy() {}

func (*RetryPolicy_Exponential) isRetryPolicy_Policy() {}

// RetryPolicyConstant define "constant" based retry policy.
type RetryPolicyConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interval value. ( default value is 1s ).
	Interval *string `protobuf:"bytes,1,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops )
	MaxRetries *uint64 `protobuf:"varint,2,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyConstant) Reset() {
	*x = RetryPolicyConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyConstant) ProtoMessage() {}

func (x *RetryPolicyConstant) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyConstant.ProtoReflect.Descriptor instead.
func (*RetryPolicyConstant) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{8}
}

func (x *RetryPolicyConstant) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

func (x *RetryPolicyConstant) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// RetryPolicyExponential define "exponential backoff" based retry policy.
type RetryPolicyExponential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial interval value. ( default value is "500ms" ).
	InitialInterval *string `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3,oneof" json:"initial_interval,omitempty"`
	// randomization factor value. ( default value is 0.5 ).
	RandomizationFactor *float64 `protobuf:"fixed64,2,opt,name=randomization_factor,json=randomizationFactor,proto3,oneof" json:"randomization_factor,omitempty"`
	// multiplier. ( default value is 1.5 ).
	Multiplier *float64 `protobuf:"fixed64,3,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
	// max interval value. ( default value is "60s" ).
	MaxInterval *string `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3,oneof" json:"max_interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops ).
	MaxRetries *uint64 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyExponential) Reset() {
	*x = RetryPolicyExponential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyExponential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyExponential) ProtoMessage() {}

func (x *RetryPolicyExponential) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyExponential.ProtoReflect.Descriptor instead.
func (*RetryPolicyExponential) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{9}
}

func (x *RetryPolicyExponential) GetInitialInterval() string {
	if x != nil && x.InitialInterval != nil {
		return *x.InitialInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetRandomizationFactor() float64 {
	if x != nil && x.RandomizationFactor != nil {
		return *x.RandomizationFactor
	}
	return 0
}

func (x *RetryPolicyExponential) GetMultiplier() float64 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *RetryPolicyExponential) GetMaxInterval() string {
	if x != nil && x.MaxInterval != nil {
		return *x.MaxInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// MethodRequest define parameters to be used for gRPC method request.
type MethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field name of the request message.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	//
	// Types that are assignable to Value:
	//
	//	*MethodRequest_By
	//	*MethodRequest_Double
	//	*MethodRequest_Float
	//	*MethodRequest_Int32
	//	*MethodRequest_Int64
	//	*MethodRequest_Uint32
	//	*MethodRequest_Uint64
	//	*MethodRequest_Sint32
	//	*MethodRequest_Sint64
	//	*MethodRequest_Fixed32
	//	*MethodRequest_Fixed64
	//	*MethodRequest_Sfixed32
	//	*MethodRequest_Sfixed64
	//	*MethodRequest_Bool
	//	*MethodRequest_String_
	//	*MethodRequest_Bytes
	//	*MethodRequest_Message
	//	*MethodRequest_Enum
	//	*MethodRequest_Env
	//	*MethodRequest_DoubleList
	//	*MethodRequest_FloatList
	//	*MethodRequest_Int32List
	//	*MethodRequest_Int64List
	//	*MethodRequest_Uint32List
	//	*MethodRequest_Uint64List
	//	*MethodRequest_Sint32List
	//	*MethodRequest_Sint64List
	//	*MethodRequest_Fixed32List
	//	*MethodRequest_Fixed64List
	//	*MethodRequest_Sfixed32List
	//	*MethodRequest_Sfixed64List
	//	*MethodRequest_BoolList
	//	*MethodRequest_StringList
	//	*MethodRequest_BytesList
	//	*MethodRequest_MessageList
	Value isMethodRequest_Value `protobuf_oneof:"value"`
}

func (x *MethodRequest) Reset() {
	*x = MethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRequest) ProtoMessage() {}

func (x *MethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRequest.ProtoReflect.Descriptor instead.
func (*MethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{10}
}

func (x *MethodRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *MethodRequest) GetValue() isMethodRequest_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MethodRequest) GetBy() string {
	if x, ok := x.GetValue().(*MethodRequest_By); ok {
		return x.By
	}
	return ""
}

func (x *MethodRequest) GetDouble() float64 {
	if x, ok := x.GetValue().(*MethodRequest_Double); ok {
		return x.Double
	}
	return 0
}

func (x *MethodRequest) GetFloat() float32 {
	if x, ok := x.GetValue().(*MethodRequest_Float); ok {
		return x.Float
	}
	return 0
}

func (x *MethodRequest) GetInt32() int32 {
	if x, ok := x.GetValue().(*MethodRequest_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *MethodRequest) GetInt64() int64 {
	if x, ok := x.GetValue().(*MethodRequest_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *MethodRequest) GetUint32() uint32 {
	if x, ok := x.GetValue().(*MethodRequest_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *MethodRequest) GetUint64() uint64 {
	if x, ok := x.GetValue().(*MethodRequest_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *MethodRequest) GetSint32() int32 {
	if x, ok := x.GetValue().(*MethodRequest_Sint32); ok {
		return x.Sint32
	}
	return 0
}

func (x *MethodRequest) GetSint64() int64 {
	if x, ok := x.GetValue().(*MethodRequest_Sint64); ok {
		return x.Sint64
	}
	return 0
}

func (x *MethodRequest) GetFixed32() uint32 {
	if x, ok := x.GetValue().(*MethodRequest_Fixed32); ok {
		return x.Fixed32
	}
	return 0
}

func (x *MethodRequest) GetFixed64() uint64 {
	if x, ok := x.GetValue().(*MethodRequest_Fixed64); ok {
		return x.Fixed64
	}
	return 0
}

func (x *MethodRequest) GetSfixed32() int32 {
	if x, ok := x.GetValue().(*MethodRequest_Sfixed32); ok {
		return x.Sfixed32
	}
	return 0
}

func (x *MethodRequest) GetSfixed64() int64 {
	if x, ok := x.GetValue().(*MethodRequest_Sfixed64); ok {
		return x.Sfixed64
	}
	return 0
}

func (x *MethodRequest) GetBool() bool {
	if x, ok := x.GetValue().(*MethodRequest_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *MethodRequest) GetString_() string {
	if x, ok := x.GetValue().(*MethodRequest_String_); ok {
		return x.String_
	}
	return ""
}

func (x *MethodRequest) GetBytes() []byte {
	if x, ok := x.GetValue().(*MethodRequest_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *MethodRequest) GetMessage() *MessageValue {
	if x, ok := x.GetValue().(*MethodRequest_Message); ok {
		return x.Message
	}
	return nil
}

func (x *MethodRequest) GetEnum() string {
	if x, ok := x.GetValue().(*MethodRequest_Enum); ok {
		return x.Enum
	}
	return ""
}

func (x *MethodRequest) GetEnv() string {
	if x, ok := x.GetValue().(*MethodRequest_Env); ok {
		return x.Env
	}
	return ""
}

func (x *MethodRequest) GetDoubleList() *DoubleListValue {
	if x, ok := x.GetValue().(*MethodRequest_DoubleList); ok {
		return x.DoubleList
	}
	return nil
}

func (x *MethodRequest) GetFloatList() *FloatListValue {
	if x, ok := x.GetValue().(*MethodRequest_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (x *MethodRequest) GetInt32List() *Int32ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Int32List); ok {
		return x.Int32List
	}
	return nil
}

func (x *MethodRequest) GetInt64List() *Int64ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (x *MethodRequest) GetUint32List() *Uint32ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Uint32List); ok {
		return x.Uint32List
	}
	return nil
}

func (x *MethodRequest) GetUint64List() *Uint64ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Uint64List); ok {
		return x.Uint64List
	}
	return nil
}

func (x *MethodRequest) GetSint32List() *Sint32ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Sint32List); ok {
		return x.Sint32List
	}
	return nil
}

func (x *MethodRequest) GetSint64List() *Sint64ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Sint64List); ok {
		return x.Sint64List
	}
	return nil
}

func (x *MethodRequest) GetFixed32List() *Fixed32ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Fixed32List); ok {
		return x.Fixed32List
	}
	return nil
}

func (x *MethodRequest) GetFixed64List() *Fixed64ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Fixed64List); ok {
		return x.Fixed64List
	}
	return nil
}

func (x *MethodRequest) GetSfixed32List() *SFixed32ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Sfixed32List); ok {
		return x.Sfixed32List
	}
	return nil
}

func (x *MethodRequest) GetSfixed64List() *SFixed64ListValue {
	if x, ok := x.GetValue().(*MethodRequest_Sfixed64List); ok {
		return x.Sfixed64List
	}
	return nil
}

func (x *MethodRequest) GetBoolList() *BoolListValue {
	if x, ok := x.GetValue().(*MethodRequest_BoolList); ok {
		return x.BoolList
	}
	return nil
}

func (x *MethodRequest) GetStringList() *StringListValue {
	if x, ok := x.GetValue().(*MethodRequest_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *MethodRequest) GetBytesList() *BytesListValue {
	if x, ok := x.GetValue().(*MethodRequest_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (x *MethodRequest) GetMessageList() *MessageListValue {
	if x, ok := x.GetValue().(*MethodRequest_MessageList); ok {
		return x.MessageList
	}
	return nil
}

type isMethodRequest_Value interface {
	isMethodRequest_Value()
}

type MethodRequest_By struct {
	By string `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type MethodRequest_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof"`
}

type MethodRequest_Float struct {
	Float float32 `protobuf:"fixed32,4,opt,name=float,proto3,oneof"`
}

type MethodRequest_Int32 struct {
	Int32 int32 `protobuf:"varint,5,opt,name=int32,proto3,oneof"`
}

type MethodRequest_Int64 struct {
	Int64 int64 `protobuf:"varint,6,opt,name=int64,proto3,oneof"`
}

type MethodRequest_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,7,opt,name=uint32,proto3,oneof"`
}

type MethodRequest_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,8,opt,name=uint64,proto3,oneof"`
}

type MethodRequest_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,9,opt,name=sint32,proto3,oneof"`
}

type MethodRequest_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,10,opt,name=sint64,proto3,oneof"`
}

type MethodRequest_Fixed32 struct {
	Fixed32 uint32 `protobuf:"fixed32,11,opt,name=fixed32,proto3,oneof"`
}

type MethodRequest_Fixed64 struct {
	Fixed64 uint64 `protobuf:"fixed64,12,opt,name=fixed64,proto3,oneof"`
}

type MethodRequest_Sfixed32 struct {
	Sfixed32 int32 `protobuf:"fixed32,13,opt,name=sfixed32,proto3,oneof"`
}

type MethodRequest_Sfixed64 struct {
	Sfixed64 int64 `protobuf:"fixed64,14,opt,name=sfixed64,proto3,oneof"`
}

type MethodRequest_Bool struct {
	Bool bool `protobuf:"varint,15,opt,name=bool,proto3,oneof"`
}

type MethodRequest_String_ struct {
	String_ string `protobuf:"bytes,16,opt,name=string,proto3,oneof"`
}

type MethodRequest_Bytes struct {
	Bytes []byte `protobuf:"bytes,17,opt,name=bytes,proto3,oneof"`
}

type MethodRequest_Message struct {
	Message *MessageValue `protobuf:"bytes,18,opt,name=message,proto3,oneof"`
}

type MethodRequest_Enum struct {
	Enum string `protobuf:"bytes,19,opt,name=enum,proto3,oneof"`
}

type MethodRequest_Env struct {
	Env string `protobuf:"bytes,20,opt,name=env,proto3,oneof"`
}

type MethodRequest_DoubleList struct {
	DoubleList *DoubleListValue `protobuf:"bytes,21,opt,name=double_list,json=doubleList,proto3,oneof"`
}

type MethodRequest_FloatList struct {
	FloatList *FloatListValue `protobuf:"bytes,22,opt,name=float_list,json=floatList,proto3,oneof"`
}

type MethodRequest_Int32List struct {
	Int32List *Int32ListValue `protobuf:"bytes,23,opt,name=int32_list,json=int32List,proto3,oneof"`
}

type MethodRequest_Int64List struct {
	Int64List *Int64ListValue `protobuf:"bytes,24,opt,name=int64_list,json=int64List,proto3,oneof"`
}

type MethodRequest_Uint32List struct {
	Uint32List *Uint32ListValue `protobuf:"bytes,25,opt,name=uint32_list,json=uint32List,proto3,oneof"`
}

type MethodRequest_Uint64List struct {
	Uint64List *Uint64ListValue `protobuf:"bytes,26,opt,name=uint64_list,json=uint64List,proto3,oneof"`
}

type MethodRequest_Sint32List struct {
	Sint32List *Sint32ListValue `protobuf:"bytes,27,opt,name=sint32_list,json=sint32List,proto3,oneof"`
}

type MethodRequest_Sint64List struct {
	Sint64List *Sint64ListValue `protobuf:"bytes,28,opt,name=sint64_list,json=sint64List,proto3,oneof"`
}

type MethodRequest_Fixed32List struct {
	Fixed32List *Fixed32ListValue `protobuf:"bytes,29,opt,name=fixed32_list,json=fixed32List,proto3,oneof"`
}

type MethodRequest_Fixed64List struct {
	Fixed64List *Fixed64ListValue `protobuf:"bytes,30,opt,name=fixed64_list,json=fixed64List,proto3,oneof"`
}

type MethodRequest_Sfixed32List struct {
	Sfixed32List *SFixed32ListValue `protobuf:"bytes,31,opt,name=sfixed32_list,json=sfixed32List,proto3,oneof"`
}

type MethodRequest_Sfixed64List struct {
	Sfixed64List *SFixed64ListValue `protobuf:"bytes,32,opt,name=sfixed64_list,json=sfixed64List,proto3,oneof"`
}

type MethodRequest_BoolList struct {
	BoolList *BoolListValue `protobuf:"bytes,33,opt,name=bool_list,json=boolList,proto3,oneof"`
}

type MethodRequest_StringList struct {
	StringList *StringListValue `protobuf:"bytes,34,opt,name=string_list,json=stringList,proto3,oneof"`
}

type MethodRequest_BytesList struct {
	BytesList *BytesListValue `protobuf:"bytes,35,opt,name=bytes_list,json=bytesList,proto3,oneof"`
}

type MethodRequest_MessageList struct {
	MessageList *MessageListValue `protobuf:"bytes,36,opt,name=message_list,json=messageList,proto3,oneof"`
}

func (*MethodRequest_By) isMethodRequest_Value() {}

func (*MethodRequest_Double) isMethodRequest_Value() {}

func (*MethodRequest_Float) isMethodRequest_Value() {}

func (*MethodRequest_Int32) isMethodRequest_Value() {}

func (*MethodRequest_Int64) isMethodRequest_Value() {}

func (*MethodRequest_Uint32) isMethodRequest_Value() {}

func (*MethodRequest_Uint64) isMethodRequest_Value() {}

func (*MethodRequest_Sint32) isMethodRequest_Value() {}

func (*MethodRequest_Sint64) isMethodRequest_Value() {}

func (*MethodRequest_Fixed32) isMethodRequest_Value() {}

func (*MethodRequest_Fixed64) isMethodRequest_Value() {}

func (*MethodRequest_Sfixed32) isMethodRequest_Value() {}

func (*MethodRequest_Sfixed64) isMethodRequest_Value() {}

func (*MethodRequest_Bool) isMethodRequest_Value() {}

func (*MethodRequest_String_) isMethodRequest_Value() {}

func (*MethodRequest_Bytes) isMethodRequest_Value() {}

func (*MethodRequest_Message) isMethodRequest_Value() {}

func (*MethodRequest_Enum) isMethodRequest_Value() {}

func (*MethodRequest_Env) isMethodRequest_Value() {}

func (*MethodRequest_DoubleList) isMethodRequest_Value() {}

func (*MethodRequest_FloatList) isMethodRequest_Value() {}

func (*MethodRequest_Int32List) isMethodRequest_Value() {}

func (*MethodRequest_Int64List) isMethodRequest_Value() {}

func (*MethodRequest_Uint32List) isMethodRequest_Value() {}

func (*MethodRequest_Uint64List) isMethodRequest_Value() {}

func (*MethodRequest_Sint32List) isMethodRequest_Value() {}

func (*MethodRequest_Sint64List) isMethodRequest_Value() {}

func (*MethodRequest_Fixed32List) isMethodRequest_Value() {}

func (*MethodRequest_Fixed64List) isMethodRequest_Value() {}

func (*MethodRequest_Sfixed32List) isMethodRequest_Value() {}

func (*MethodRequest_Sfixed64List) isMethodRequest_Value() {}

func (*MethodRequest_BoolList) isMethodRequest_Value() {}

func (*MethodRequest_StringList) isMethodRequest_Value() {}

func (*MethodRequest_BytesList) isMethodRequest_Value() {}

func (*MethodRequest_MessageList) isMethodRequest_Value() {}

// MethodResponse define which value of the method response is referenced.
type MethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify the unique name that can be used in a `MessageRule` / `FieldRule` for the same message for a specific field in the response.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// field name in response message.
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	// autobind if the value referenced by `field` is a message type,
	// the value of a field with the same name and type as the field name of its own message is automatically assigned to the value of the field in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind bool `protobuf:"varint,3,opt,name=autobind,proto3" json:"autobind,omitempty"`
}

func (x *MethodResponse) Reset() {
	*x = MethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodResponse) ProtoMessage() {}

func (x *MethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodResponse.ProtoReflect.Descriptor instead.
func (*MethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{11}
}

func (x *MethodResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MethodResponse) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MethodResponse) GetAutobind() bool {
	if x != nil {
		return x.Autobind
	}
	return false
}

// Message define dependent message.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify a unique name for the dependent message.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// message specify the message to be referred to by FQDN. format is `<package-name>.<message-name>`.
	// <package-name> can be omitted when referring to messages in the same package.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// repeated specify when multiple target messages are to be retrieved.
	Repeated bool `protobuf:"varint,3,opt,name=repeated,proto3" json:"repeated,omitempty"`
	// args specify the parameters needed to retrieve the message. This is called the message argument.
	Args []*Argument `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// autobind the value of a field with the same name and type as the field name of this message is automatically assigned to the field value in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind bool `protobuf:"varint,5,opt,name=autobind,proto3" json:"autobind,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{12}
}

func (x *Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *Message) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Message) GetAutobind() bool {
	if x != nil {
		return x.Autobind
	}
	return false
}

// Argument define message argument.
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the message argument.
	// Use this name to refer to the message argument.
	// For example, if `foo` is specified as the name, it is referenced by `$.foo`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Argument_By
	//	*Argument_Inline
	//	*Argument_Double
	//	*Argument_Float
	//	*Argument_Int32
	//	*Argument_Int64
	//	*Argument_Uint32
	//	*Argument_Uint64
	//	*Argument_Sint32
	//	*Argument_Sint64
	//	*Argument_Fixed32
	//	*Argument_Fixed64
	//	*Argument_Sfixed32
	//	*Argument_Sfixed64
	//	*Argument_Bool
	//	*Argument_String_
	//	*Argument_Bytes
	//	*Argument_Message
	//	*Argument_Enum
	//	*Argument_Env
	//	*Argument_DoubleList
	//	*Argument_FloatList
	//	*Argument_Int32List
	//	*Argument_Int64List
	//	*Argument_Uint32List
	//	*Argument_Uint64List
	//	*Argument_Sint32List
	//	*Argument_Sint64List
	//	*Argument_Fixed32List
	//	*Argument_Fixed64List
	//	*Argument_Sfixed32List
	//	*Argument_Sfixed64List
	//	*Argument_BoolList
	//	*Argument_StringList
	//	*Argument_BytesList
	//	*Argument_MessageList
	Value isArgument_Value `protobuf_oneof:"value"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{13}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Argument) GetValue() isArgument_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Argument) GetBy() string {
	if x, ok := x.GetValue().(*Argument_By); ok {
		return x.By
	}
	return ""
}

func (x *Argument) GetInline() string {
	if x, ok := x.GetValue().(*Argument_Inline); ok {
		return x.Inline
	}
	return ""
}

func (x *Argument) GetDouble() float64 {
	if x, ok := x.GetValue().(*Argument_Double); ok {
		return x.Double
	}
	return 0
}

func (x *Argument) GetFloat() float32 {
	if x, ok := x.GetValue().(*Argument_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Argument) GetInt32() int32 {
	if x, ok := x.GetValue().(*Argument_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *Argument) GetInt64() int64 {
	if x, ok := x.GetValue().(*Argument_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *Argument) GetUint32() uint32 {
	if x, ok := x.GetValue().(*Argument_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *Argument) GetUint64() uint64 {
	if x, ok := x.GetValue().(*Argument_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *Argument) GetSint32() int32 {
	if x, ok := x.GetValue().(*Argument_Sint32); ok {
		return x.Sint32
	}
	return 0
}

func (x *Argument) GetSint64() int64 {
	if x, ok := x.GetValue().(*Argument_Sint64); ok {
		return x.Sint64
	}
	return 0
}

func (x *Argument) GetFixed32() uint32 {
	if x, ok := x.GetValue().(*Argument_Fixed32); ok {
		return x.Fixed32
	}
	return 0
}

func (x *Argument) GetFixed64() uint64 {
	if x, ok := x.GetValue().(*Argument_Fixed64); ok {
		return x.Fixed64
	}
	return 0
}

func (x *Argument) GetSfixed32() int32 {
	if x, ok := x.GetValue().(*Argument_Sfixed32); ok {
		return x.Sfixed32
	}
	return 0
}

func (x *Argument) GetSfixed64() int64 {
	if x, ok := x.GetValue().(*Argument_Sfixed64); ok {
		return x.Sfixed64
	}
	return 0
}

func (x *Argument) GetBool() bool {
	if x, ok := x.GetValue().(*Argument_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Argument) GetString_() string {
	if x, ok := x.GetValue().(*Argument_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Argument) GetBytes() []byte {
	if x, ok := x.GetValue().(*Argument_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Argument) GetMessage() *MessageValue {
	if x, ok := x.GetValue().(*Argument_Message); ok {
		return x.Message
	}
	return nil
}

func (x *Argument) GetEnum() string {
	if x, ok := x.GetValue().(*Argument_Enum); ok {
		return x.Enum
	}
	return ""
}

func (x *Argument) GetEnv() string {
	if x, ok := x.GetValue().(*Argument_Env); ok {
		return x.Env
	}
	return ""
}

func (x *Argument) GetDoubleList() *DoubleListValue {
	if x, ok := x.GetValue().(*Argument_DoubleList); ok {
		return x.DoubleList
	}
	return nil
}

func (x *Argument) GetFloatList() *FloatListValue {
	if x, ok := x.GetValue().(*Argument_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (x *Argument) GetInt32List() *Int32ListValue {
	if x, ok := x.GetValue().(*Argument_Int32List); ok {
		return x.Int32List
	}
	return nil
}

func (x *Argument) GetInt64List() *Int64ListValue {
	if x, ok := x.GetValue().(*Argument_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (x *Argument) GetUint32List() *Uint32ListValue {
	if x, ok := x.GetValue().(*Argument_Uint32List); ok {
		return x.Uint32List
	}
	return nil
}

func (x *Argument) GetUint64List() *Uint64ListValue {
	if x, ok := x.GetValue().(*Argument_Uint64List); ok {
		return x.Uint64List
	}
	return nil
}

func (x *Argument) GetSint32List() *Sint32ListValue {
	if x, ok := x.GetValue().(*Argument_Sint32List); ok {
		return x.Sint32List
	}
	return nil
}

func (x *Argument) GetSint64List() *Sint64ListValue {
	if x, ok := x.GetValue().(*Argument_Sint64List); ok {
		return x.Sint64List
	}
	return nil
}

func (x *Argument) GetFixed32List() *Fixed32ListValue {
	if x, ok := x.GetValue().(*Argument_Fixed32List); ok {
		return x.Fixed32List
	}
	return nil
}

func (x *Argument) GetFixed64List() *Fixed64ListValue {
	if x, ok := x.GetValue().(*Argument_Fixed64List); ok {
		return x.Fixed64List
	}
	return nil
}

func (x *Argument) GetSfixed32List() *SFixed32ListValue {
	if x, ok := x.GetValue().(*Argument_Sfixed32List); ok {
		return x.Sfixed32List
	}
	return nil
}

func (x *Argument) GetSfixed64List() *SFixed64ListValue {
	if x, ok := x.GetValue().(*Argument_Sfixed64List); ok {
		return x.Sfixed64List
	}
	return nil
}

func (x *Argument) GetBoolList() *BoolListValue {
	if x, ok := x.GetValue().(*Argument_BoolList); ok {
		return x.BoolList
	}
	return nil
}

func (x *Argument) GetStringList() *StringListValue {
	if x, ok := x.GetValue().(*Argument_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *Argument) GetBytesList() *BytesListValue {
	if x, ok := x.GetValue().(*Argument_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (x *Argument) GetMessageList() *MessageListValue {
	if x, ok := x.GetValue().(*Argument_MessageList); ok {
		return x.MessageList
	}
	return nil
}

type isArgument_Value interface {
	isArgument_Value()
}

type Argument_By struct {
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	By string `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type Argument_Inline struct {
	// inline like by, it refers to the specified value and expands all fields beyond it.
	// For this reason, the referenced value must always be of message type.
	Inline string `protobuf:"bytes,3,opt,name=inline,proto3,oneof"`
}

type Argument_Double struct {
	Double float64 `protobuf:"fixed64,4,opt,name=double,proto3,oneof"`
}

type Argument_Float struct {
	Float float32 `protobuf:"fixed32,5,opt,name=float,proto3,oneof"`
}

type Argument_Int32 struct {
	Int32 int32 `protobuf:"varint,6,opt,name=int32,proto3,oneof"`
}

type Argument_Int64 struct {
	Int64 int64 `protobuf:"varint,7,opt,name=int64,proto3,oneof"`
}

type Argument_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,8,opt,name=uint32,proto3,oneof"`
}

type Argument_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,9,opt,name=uint64,proto3,oneof"`
}

type Argument_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,10,opt,name=sint32,proto3,oneof"`
}

type Argument_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,11,opt,name=sint64,proto3,oneof"`
}

type Argument_Fixed32 struct {
	Fixed32 uint32 `protobuf:"fixed32,12,opt,name=fixed32,proto3,oneof"`
}

type Argument_Fixed64 struct {
	Fixed64 uint64 `protobuf:"fixed64,13,opt,name=fixed64,proto3,oneof"`
}

type Argument_Sfixed32 struct {
	Sfixed32 int32 `protobuf:"fixed32,14,opt,name=sfixed32,proto3,oneof"`
}

type Argument_Sfixed64 struct {
	Sfixed64 int64 `protobuf:"fixed64,15,opt,name=sfixed64,proto3,oneof"`
}

type Argument_Bool struct {
	Bool bool `protobuf:"varint,16,opt,name=bool,proto3,oneof"`
}

type Argument_String_ struct {
	String_ string `protobuf:"bytes,17,opt,name=string,proto3,oneof"`
}

type Argument_Bytes struct {
	Bytes []byte `protobuf:"bytes,18,opt,name=bytes,proto3,oneof"`
}

type Argument_Message struct {
	Message *MessageValue `protobuf:"bytes,19,opt,name=message,proto3,oneof"`
}

type Argument_Enum struct {
	Enum string `protobuf:"bytes,20,opt,name=enum,proto3,oneof"`
}

type Argument_Env struct {
	Env string `protobuf:"bytes,21,opt,name=env,proto3,oneof"`
}

type Argument_DoubleList struct {
	DoubleList *DoubleListValue `protobuf:"bytes,22,opt,name=double_list,json=doubleList,proto3,oneof"`
}

type Argument_FloatList struct {
	FloatList *FloatListValue `protobuf:"bytes,23,opt,name=float_list,json=floatList,proto3,oneof"`
}

type Argument_Int32List struct {
	Int32List *Int32ListValue `protobuf:"bytes,24,opt,name=int32_list,json=int32List,proto3,oneof"`
}

type Argument_Int64List struct {
	Int64List *Int64ListValue `protobuf:"bytes,25,opt,name=int64_list,json=int64List,proto3,oneof"`
}

type Argument_Uint32List struct {
	Uint32List *Uint32ListValue `protobuf:"bytes,26,opt,name=uint32_list,json=uint32List,proto3,oneof"`
}

type Argument_Uint64List struct {
	Uint64List *Uint64ListValue `protobuf:"bytes,27,opt,name=uint64_list,json=uint64List,proto3,oneof"`
}

type Argument_Sint32List struct {
	Sint32List *Sint32ListValue `protobuf:"bytes,28,opt,name=sint32_list,json=sint32List,proto3,oneof"`
}

type Argument_Sint64List struct {
	Sint64List *Sint64ListValue `protobuf:"bytes,29,opt,name=sint64_list,json=sint64List,proto3,oneof"`
}

type Argument_Fixed32List struct {
	Fixed32List *Fixed32ListValue `protobuf:"bytes,30,opt,name=fixed32_list,json=fixed32List,proto3,oneof"`
}

type Argument_Fixed64List struct {
	Fixed64List *Fixed64ListValue `protobuf:"bytes,31,opt,name=fixed64_list,json=fixed64List,proto3,oneof"`
}

type Argument_Sfixed32List struct {
	Sfixed32List *SFixed32ListValue `protobuf:"bytes,32,opt,name=sfixed32_list,json=sfixed32List,proto3,oneof"`
}

type Argument_Sfixed64List struct {
	Sfixed64List *SFixed64ListValue `protobuf:"bytes,33,opt,name=sfixed64_list,json=sfixed64List,proto3,oneof"`
}

type Argument_BoolList struct {
	BoolList *BoolListValue `protobuf:"bytes,34,opt,name=bool_list,json=boolList,proto3,oneof"`
}

type Argument_StringList struct {
	StringList *StringListValue `protobuf:"bytes,35,opt,name=string_list,json=stringList,proto3,oneof"`
}

type Argument_BytesList struct {
	BytesList *BytesListValue `protobuf:"bytes,36,opt,name=bytes_list,json=bytesList,proto3,oneof"`
}

type Argument_MessageList struct {
	MessageList *MessageListValue `protobuf:"bytes,37,opt,name=message_list,json=messageList,proto3,oneof"`
}

func (*Argument_By) isArgument_Value() {}

func (*Argument_Inline) isArgument_Value() {}

func (*Argument_Double) isArgument_Value() {}

func (*Argument_Float) isArgument_Value() {}

func (*Argument_Int32) isArgument_Value() {}

func (*Argument_Int64) isArgument_Value() {}

func (*Argument_Uint32) isArgument_Value() {}

func (*Argument_Uint64) isArgument_Value() {}

func (*Argument_Sint32) isArgument_Value() {}

func (*Argument_Sint64) isArgument_Value() {}

func (*Argument_Fixed32) isArgument_Value() {}

func (*Argument_Fixed64) isArgument_Value() {}

func (*Argument_Sfixed32) isArgument_Value() {}

func (*Argument_Sfixed64) isArgument_Value() {}

func (*Argument_Bool) isArgument_Value() {}

func (*Argument_String_) isArgument_Value() {}

func (*Argument_Bytes) isArgument_Value() {}

func (*Argument_Message) isArgument_Value() {}

func (*Argument_Enum) isArgument_Value() {}

func (*Argument_Env) isArgument_Value() {}

func (*Argument_DoubleList) isArgument_Value() {}

func (*Argument_FloatList) isArgument_Value() {}

func (*Argument_Int32List) isArgument_Value() {}

func (*Argument_Int64List) isArgument_Value() {}

func (*Argument_Uint32List) isArgument_Value() {}

func (*Argument_Uint64List) isArgument_Value() {}

func (*Argument_Sint32List) isArgument_Value() {}

func (*Argument_Sint64List) isArgument_Value() {}

func (*Argument_Fixed32List) isArgument_Value() {}

func (*Argument_Fixed64List) isArgument_Value() {}

func (*Argument_Sfixed32List) isArgument_Value() {}

func (*Argument_Sfixed64List) isArgument_Value() {}

func (*Argument_BoolList) isArgument_Value() {}

func (*Argument_StringList) isArgument_Value() {}

func (*Argument_BytesList) isArgument_Value() {}

func (*Argument_MessageList) isArgument_Value() {}

// FieldRule define GRPC Federation rules for the field of message.
type FieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*FieldRule_CustomResolver
	//	*FieldRule_By
	//	*FieldRule_Double
	//	*FieldRule_Float
	//	*FieldRule_Int32
	//	*FieldRule_Int64
	//	*FieldRule_Uint32
	//	*FieldRule_Uint64
	//	*FieldRule_Sint32
	//	*FieldRule_Sint64
	//	*FieldRule_Fixed32
	//	*FieldRule_Fixed64
	//	*FieldRule_Sfixed32
	//	*FieldRule_Sfixed64
	//	*FieldRule_Bool
	//	*FieldRule_String_
	//	*FieldRule_Bytes
	//	*FieldRule_Message
	//	*FieldRule_Enum
	//	*FieldRule_Env
	//	*FieldRule_DoubleList
	//	*FieldRule_FloatList
	//	*FieldRule_Int32List
	//	*FieldRule_Int64List
	//	*FieldRule_Uint32List
	//	*FieldRule_Uint64List
	//	*FieldRule_Sint32List
	//	*FieldRule_Sint64List
	//	*FieldRule_Fixed32List
	//	*FieldRule_Fixed64List
	//	*FieldRule_Sfixed32List
	//	*FieldRule_Sfixed64List
	//	*FieldRule_BoolList
	//	*FieldRule_StringList
	//	*FieldRule_BytesList
	//	*FieldRule_MessageList
	//	*FieldRule_Alias
	Value isFieldRule_Value `protobuf_oneof:"value"`
}

func (x *FieldRule) Reset() {
	*x = FieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRule) ProtoMessage() {}

func (x *FieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRule.ProtoReflect.Descriptor instead.
func (*FieldRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{14}
}

func (m *FieldRule) GetValue() isFieldRule_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FieldRule) GetCustomResolver() bool {
	if x, ok := x.GetValue().(*FieldRule_CustomResolver); ok {
		return x.CustomResolver
	}
	return false
}

func (x *FieldRule) GetBy() string {
	if x, ok := x.GetValue().(*FieldRule_By); ok {
		return x.By
	}
	return ""
}

func (x *FieldRule) GetDouble() float64 {
	if x, ok := x.GetValue().(*FieldRule_Double); ok {
		return x.Double
	}
	return 0
}

func (x *FieldRule) GetFloat() float32 {
	if x, ok := x.GetValue().(*FieldRule_Float); ok {
		return x.Float
	}
	return 0
}

func (x *FieldRule) GetInt32() int32 {
	if x, ok := x.GetValue().(*FieldRule_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *FieldRule) GetInt64() int64 {
	if x, ok := x.GetValue().(*FieldRule_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *FieldRule) GetUint32() uint32 {
	if x, ok := x.GetValue().(*FieldRule_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *FieldRule) GetUint64() uint64 {
	if x, ok := x.GetValue().(*FieldRule_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *FieldRule) GetSint32() int32 {
	if x, ok := x.GetValue().(*FieldRule_Sint32); ok {
		return x.Sint32
	}
	return 0
}

func (x *FieldRule) GetSint64() int64 {
	if x, ok := x.GetValue().(*FieldRule_Sint64); ok {
		return x.Sint64
	}
	return 0
}

func (x *FieldRule) GetFixed32() uint32 {
	if x, ok := x.GetValue().(*FieldRule_Fixed32); ok {
		return x.Fixed32
	}
	return 0
}

func (x *FieldRule) GetFixed64() uint64 {
	if x, ok := x.GetValue().(*FieldRule_Fixed64); ok {
		return x.Fixed64
	}
	return 0
}

func (x *FieldRule) GetSfixed32() int32 {
	if x, ok := x.GetValue().(*FieldRule_Sfixed32); ok {
		return x.Sfixed32
	}
	return 0
}

func (x *FieldRule) GetSfixed64() int64 {
	if x, ok := x.GetValue().(*FieldRule_Sfixed64); ok {
		return x.Sfixed64
	}
	return 0
}

func (x *FieldRule) GetBool() bool {
	if x, ok := x.GetValue().(*FieldRule_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *FieldRule) GetString_() string {
	if x, ok := x.GetValue().(*FieldRule_String_); ok {
		return x.String_
	}
	return ""
}

func (x *FieldRule) GetBytes() []byte {
	if x, ok := x.GetValue().(*FieldRule_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *FieldRule) GetMessage() *MessageValue {
	if x, ok := x.GetValue().(*FieldRule_Message); ok {
		return x.Message
	}
	return nil
}

func (x *FieldRule) GetEnum() string {
	if x, ok := x.GetValue().(*FieldRule_Enum); ok {
		return x.Enum
	}
	return ""
}

func (x *FieldRule) GetEnv() string {
	if x, ok := x.GetValue().(*FieldRule_Env); ok {
		return x.Env
	}
	return ""
}

func (x *FieldRule) GetDoubleList() *DoubleListValue {
	if x, ok := x.GetValue().(*FieldRule_DoubleList); ok {
		return x.DoubleList
	}
	return nil
}

func (x *FieldRule) GetFloatList() *FloatListValue {
	if x, ok := x.GetValue().(*FieldRule_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (x *FieldRule) GetInt32List() *Int32ListValue {
	if x, ok := x.GetValue().(*FieldRule_Int32List); ok {
		return x.Int32List
	}
	return nil
}

func (x *FieldRule) GetInt64List() *Int64ListValue {
	if x, ok := x.GetValue().(*FieldRule_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (x *FieldRule) GetUint32List() *Uint32ListValue {
	if x, ok := x.GetValue().(*FieldRule_Uint32List); ok {
		return x.Uint32List
	}
	return nil
}

func (x *FieldRule) GetUint64List() *Uint64ListValue {
	if x, ok := x.GetValue().(*FieldRule_Uint64List); ok {
		return x.Uint64List
	}
	return nil
}

func (x *FieldRule) GetSint32List() *Sint32ListValue {
	if x, ok := x.GetValue().(*FieldRule_Sint32List); ok {
		return x.Sint32List
	}
	return nil
}

func (x *FieldRule) GetSint64List() *Sint64ListValue {
	if x, ok := x.GetValue().(*FieldRule_Sint64List); ok {
		return x.Sint64List
	}
	return nil
}

func (x *FieldRule) GetFixed32List() *Fixed32ListValue {
	if x, ok := x.GetValue().(*FieldRule_Fixed32List); ok {
		return x.Fixed32List
	}
	return nil
}

func (x *FieldRule) GetFixed64List() *Fixed64ListValue {
	if x, ok := x.GetValue().(*FieldRule_Fixed64List); ok {
		return x.Fixed64List
	}
	return nil
}

func (x *FieldRule) GetSfixed32List() *SFixed32ListValue {
	if x, ok := x.GetValue().(*FieldRule_Sfixed32List); ok {
		return x.Sfixed32List
	}
	return nil
}

func (x *FieldRule) GetSfixed64List() *SFixed64ListValue {
	if x, ok := x.GetValue().(*FieldRule_Sfixed64List); ok {
		return x.Sfixed64List
	}
	return nil
}

func (x *FieldRule) GetBoolList() *BoolListValue {
	if x, ok := x.GetValue().(*FieldRule_BoolList); ok {
		return x.BoolList
	}
	return nil
}

func (x *FieldRule) GetStringList() *StringListValue {
	if x, ok := x.GetValue().(*FieldRule_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *FieldRule) GetBytesList() *BytesListValue {
	if x, ok := x.GetValue().(*FieldRule_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (x *FieldRule) GetMessageList() *MessageListValue {
	if x, ok := x.GetValue().(*FieldRule_MessageList); ok {
		return x.MessageList
	}
	return nil
}

func (x *FieldRule) GetAlias() string {
	if x, ok := x.GetValue().(*FieldRule_Alias); ok {
		return x.Alias
	}
	return ""
}

type isFieldRule_Value interface {
	isFieldRule_Value()
}

type FieldRule_CustomResolver struct {
	// If custom_resolver is true, the field binding process is to be implemented in Go.
	// If there are any values retrieved by grpc.federation.message option, they are passed as arguments for custom resolver.
	CustomResolver bool `protobuf:"varint,1,opt,name=custom_resolver,json=customResolver,proto3,oneof"`
}

type FieldRule_By struct {
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	By string `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type FieldRule_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof"`
}

type FieldRule_Float struct {
	Float float32 `protobuf:"fixed32,4,opt,name=float,proto3,oneof"`
}

type FieldRule_Int32 struct {
	Int32 int32 `protobuf:"varint,5,opt,name=int32,proto3,oneof"`
}

type FieldRule_Int64 struct {
	Int64 int64 `protobuf:"varint,6,opt,name=int64,proto3,oneof"`
}

type FieldRule_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,7,opt,name=uint32,proto3,oneof"`
}

type FieldRule_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,8,opt,name=uint64,proto3,oneof"`
}

type FieldRule_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,9,opt,name=sint32,proto3,oneof"`
}

type FieldRule_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,10,opt,name=sint64,proto3,oneof"`
}

type FieldRule_Fixed32 struct {
	Fixed32 uint32 `protobuf:"fixed32,11,opt,name=fixed32,proto3,oneof"`
}

type FieldRule_Fixed64 struct {
	Fixed64 uint64 `protobuf:"fixed64,12,opt,name=fixed64,proto3,oneof"`
}

type FieldRule_Sfixed32 struct {
	Sfixed32 int32 `protobuf:"fixed32,13,opt,name=sfixed32,proto3,oneof"`
}

type FieldRule_Sfixed64 struct {
	Sfixed64 int64 `protobuf:"fixed64,14,opt,name=sfixed64,proto3,oneof"`
}

type FieldRule_Bool struct {
	Bool bool `protobuf:"varint,15,opt,name=bool,proto3,oneof"`
}

type FieldRule_String_ struct {
	String_ string `protobuf:"bytes,16,opt,name=string,proto3,oneof"`
}

type FieldRule_Bytes struct {
	Bytes []byte `protobuf:"bytes,17,opt,name=bytes,proto3,oneof"`
}

type FieldRule_Message struct {
	Message *MessageValue `protobuf:"bytes,18,opt,name=message,proto3,oneof"`
}

type FieldRule_Enum struct {
	Enum string `protobuf:"bytes,19,opt,name=enum,proto3,oneof"`
}

type FieldRule_Env struct {
	Env string `protobuf:"bytes,20,opt,name=env,proto3,oneof"`
}

type FieldRule_DoubleList struct {
	DoubleList *DoubleListValue `protobuf:"bytes,21,opt,name=double_list,json=doubleList,proto3,oneof"`
}

type FieldRule_FloatList struct {
	FloatList *FloatListValue `protobuf:"bytes,22,opt,name=float_list,json=floatList,proto3,oneof"`
}

type FieldRule_Int32List struct {
	Int32List *Int32ListValue `protobuf:"bytes,23,opt,name=int32_list,json=int32List,proto3,oneof"`
}

type FieldRule_Int64List struct {
	Int64List *Int64ListValue `protobuf:"bytes,24,opt,name=int64_list,json=int64List,proto3,oneof"`
}

type FieldRule_Uint32List struct {
	Uint32List *Uint32ListValue `protobuf:"bytes,25,opt,name=uint32_list,json=uint32List,proto3,oneof"`
}

type FieldRule_Uint64List struct {
	Uint64List *Uint64ListValue `protobuf:"bytes,26,opt,name=uint64_list,json=uint64List,proto3,oneof"`
}

type FieldRule_Sint32List struct {
	Sint32List *Sint32ListValue `protobuf:"bytes,27,opt,name=sint32_list,json=sint32List,proto3,oneof"`
}

type FieldRule_Sint64List struct {
	Sint64List *Sint64ListValue `protobuf:"bytes,28,opt,name=sint64_list,json=sint64List,proto3,oneof"`
}

type FieldRule_Fixed32List struct {
	Fixed32List *Fixed32ListValue `protobuf:"bytes,29,opt,name=fixed32_list,json=fixed32List,proto3,oneof"`
}

type FieldRule_Fixed64List struct {
	Fixed64List *Fixed64ListValue `protobuf:"bytes,30,opt,name=fixed64_list,json=fixed64List,proto3,oneof"`
}

type FieldRule_Sfixed32List struct {
	Sfixed32List *SFixed32ListValue `protobuf:"bytes,31,opt,name=sfixed32_list,json=sfixed32List,proto3,oneof"`
}

type FieldRule_Sfixed64List struct {
	Sfixed64List *SFixed64ListValue `protobuf:"bytes,32,opt,name=sfixed64_list,json=sfixed64List,proto3,oneof"`
}

type FieldRule_BoolList struct {
	BoolList *BoolListValue `protobuf:"bytes,33,opt,name=bool_list,json=boolList,proto3,oneof"`
}

type FieldRule_StringList struct {
	StringList *StringListValue `protobuf:"bytes,34,opt,name=string_list,json=stringList,proto3,oneof"`
}

type FieldRule_BytesList struct {
	BytesList *BytesListValue `protobuf:"bytes,35,opt,name=bytes_list,json=bytesList,proto3,oneof"`
}

type FieldRule_MessageList struct {
	MessageList *MessageListValue `protobuf:"bytes,36,opt,name=message_list,json=messageList,proto3,oneof"`
}

type FieldRule_Alias struct {
	// alias can be used when alias is specified in grpc.federation.message option,
	// and specifies the field name to be referenced among the messages specified in alias of message option.
	// If the specified field has the same type or can be converted automatically, its value is assigned.
	Alias string `protobuf:"bytes,37,opt,name=alias,proto3,oneof"`
}

func (*FieldRule_CustomResolver) isFieldRule_Value() {}

func (*FieldRule_By) isFieldRule_Value() {}

func (*FieldRule_Double) isFieldRule_Value() {}

func (*FieldRule_Float) isFieldRule_Value() {}

func (*FieldRule_Int32) isFieldRule_Value() {}

func (*FieldRule_Int64) isFieldRule_Value() {}

func (*FieldRule_Uint32) isFieldRule_Value() {}

func (*FieldRule_Uint64) isFieldRule_Value() {}

func (*FieldRule_Sint32) isFieldRule_Value() {}

func (*FieldRule_Sint64) isFieldRule_Value() {}

func (*FieldRule_Fixed32) isFieldRule_Value() {}

func (*FieldRule_Fixed64) isFieldRule_Value() {}

func (*FieldRule_Sfixed32) isFieldRule_Value() {}

func (*FieldRule_Sfixed64) isFieldRule_Value() {}

func (*FieldRule_Bool) isFieldRule_Value() {}

func (*FieldRule_String_) isFieldRule_Value() {}

func (*FieldRule_Bytes) isFieldRule_Value() {}

func (*FieldRule_Message) isFieldRule_Value() {}

func (*FieldRule_Enum) isFieldRule_Value() {}

func (*FieldRule_Env) isFieldRule_Value() {}

func (*FieldRule_DoubleList) isFieldRule_Value() {}

func (*FieldRule_FloatList) isFieldRule_Value() {}

func (*FieldRule_Int32List) isFieldRule_Value() {}

func (*FieldRule_Int64List) isFieldRule_Value() {}

func (*FieldRule_Uint32List) isFieldRule_Value() {}

func (*FieldRule_Uint64List) isFieldRule_Value() {}

func (*FieldRule_Sint32List) isFieldRule_Value() {}

func (*FieldRule_Sint64List) isFieldRule_Value() {}

func (*FieldRule_Fixed32List) isFieldRule_Value() {}

func (*FieldRule_Fixed64List) isFieldRule_Value() {}

func (*FieldRule_Sfixed32List) isFieldRule_Value() {}

func (*FieldRule_Sfixed64List) isFieldRule_Value() {}

func (*FieldRule_BoolList) isFieldRule_Value() {}

func (*FieldRule_StringList) isFieldRule_Value() {}

func (*FieldRule_BytesList) isFieldRule_Value() {}

func (*FieldRule_MessageList) isFieldRule_Value() {}

func (*FieldRule_Alias) isFieldRule_Value() {}

type MessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields []*MessageFieldValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *MessageValue) Reset() {
	*x = MessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageValue) ProtoMessage() {}

func (x *MessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageValue.ProtoReflect.Descriptor instead.
func (*MessageValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{15}
}

func (x *MessageValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageValue) GetFields() []*MessageFieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MessageFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to Value:
	//
	//	*MessageFieldValue_By
	//	*MessageFieldValue_Double
	//	*MessageFieldValue_Float
	//	*MessageFieldValue_Int32
	//	*MessageFieldValue_Int64
	//	*MessageFieldValue_Uint32
	//	*MessageFieldValue_Uint64
	//	*MessageFieldValue_Sint32
	//	*MessageFieldValue_Sint64
	//	*MessageFieldValue_Fixed32
	//	*MessageFieldValue_Fixed64
	//	*MessageFieldValue_Sfixed32
	//	*MessageFieldValue_Sfixed64
	//	*MessageFieldValue_Bool
	//	*MessageFieldValue_String_
	//	*MessageFieldValue_Bytes
	//	*MessageFieldValue_Message
	//	*MessageFieldValue_Enum
	//	*MessageFieldValue_Env
	//	*MessageFieldValue_DoubleList
	//	*MessageFieldValue_FloatList
	//	*MessageFieldValue_Int32List
	//	*MessageFieldValue_Int64List
	//	*MessageFieldValue_Uint32List
	//	*MessageFieldValue_Uint64List
	//	*MessageFieldValue_Sint32List
	//	*MessageFieldValue_Sint64List
	//	*MessageFieldValue_Fixed32List
	//	*MessageFieldValue_Fixed64List
	//	*MessageFieldValue_Sfixed32List
	//	*MessageFieldValue_Sfixed64List
	//	*MessageFieldValue_BoolList
	//	*MessageFieldValue_StringList
	//	*MessageFieldValue_BytesList
	//	*MessageFieldValue_MessageList
	Value isMessageFieldValue_Value `protobuf_oneof:"value"`
}

func (x *MessageFieldValue) Reset() {
	*x = MessageFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFieldValue) ProtoMessage() {}

func (x *MessageFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFieldValue.ProtoReflect.Descriptor instead.
func (*MessageFieldValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{16}
}

func (x *MessageFieldValue) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *MessageFieldValue) GetValue() isMessageFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MessageFieldValue) GetBy() string {
	if x, ok := x.GetValue().(*MessageFieldValue_By); ok {
		return x.By
	}
	return ""
}

func (x *MessageFieldValue) GetDouble() float64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Double); ok {
		return x.Double
	}
	return 0
}

func (x *MessageFieldValue) GetFloat() float32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Float); ok {
		return x.Float
	}
	return 0
}

func (x *MessageFieldValue) GetInt32() int32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *MessageFieldValue) GetInt64() int64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *MessageFieldValue) GetUint32() uint32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Uint32); ok {
		return x.Uint32
	}
	return 0
}

func (x *MessageFieldValue) GetUint64() uint64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Uint64); ok {
		return x.Uint64
	}
	return 0
}

func (x *MessageFieldValue) GetSint32() int32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Sint32); ok {
		return x.Sint32
	}
	return 0
}

func (x *MessageFieldValue) GetSint64() int64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Sint64); ok {
		return x.Sint64
	}
	return 0
}

func (x *MessageFieldValue) GetFixed32() uint32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Fixed32); ok {
		return x.Fixed32
	}
	return 0
}

func (x *MessageFieldValue) GetFixed64() uint64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Fixed64); ok {
		return x.Fixed64
	}
	return 0
}

func (x *MessageFieldValue) GetSfixed32() int32 {
	if x, ok := x.GetValue().(*MessageFieldValue_Sfixed32); ok {
		return x.Sfixed32
	}
	return 0
}

func (x *MessageFieldValue) GetSfixed64() int64 {
	if x, ok := x.GetValue().(*MessageFieldValue_Sfixed64); ok {
		return x.Sfixed64
	}
	return 0
}

func (x *MessageFieldValue) GetBool() bool {
	if x, ok := x.GetValue().(*MessageFieldValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *MessageFieldValue) GetString_() string {
	if x, ok := x.GetValue().(*MessageFieldValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *MessageFieldValue) GetBytes() []byte {
	if x, ok := x.GetValue().(*MessageFieldValue_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *MessageFieldValue) GetMessage() *MessageValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Message); ok {
		return x.Message
	}
	return nil
}

func (x *MessageFieldValue) GetEnum() string {
	if x, ok := x.GetValue().(*MessageFieldValue_Enum); ok {
		return x.Enum
	}
	return ""
}

func (x *MessageFieldValue) GetEnv() string {
	if x, ok := x.GetValue().(*MessageFieldValue_Env); ok {
		return x.Env
	}
	return ""
}

func (x *MessageFieldValue) GetDoubleList() *DoubleListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_DoubleList); ok {
		return x.DoubleList
	}
	return nil
}

func (x *MessageFieldValue) GetFloatList() *FloatListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_FloatList); ok {
		return x.FloatList
	}
	return nil
}

func (x *MessageFieldValue) GetInt32List() *Int32ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Int32List); ok {
		return x.Int32List
	}
	return nil
}

func (x *MessageFieldValue) GetInt64List() *Int64ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Int64List); ok {
		return x.Int64List
	}
	return nil
}

func (x *MessageFieldValue) GetUint32List() *Uint32ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Uint32List); ok {
		return x.Uint32List
	}
	return nil
}

func (x *MessageFieldValue) GetUint64List() *Uint64ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Uint64List); ok {
		return x.Uint64List
	}
	return nil
}

func (x *MessageFieldValue) GetSint32List() *Sint32ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Sint32List); ok {
		return x.Sint32List
	}
	return nil
}

func (x *MessageFieldValue) GetSint64List() *Sint64ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Sint64List); ok {
		return x.Sint64List
	}
	return nil
}

func (x *MessageFieldValue) GetFixed32List() *Fixed32ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Fixed32List); ok {
		return x.Fixed32List
	}
	return nil
}

func (x *MessageFieldValue) GetFixed64List() *Fixed64ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Fixed64List); ok {
		return x.Fixed64List
	}
	return nil
}

func (x *MessageFieldValue) GetSfixed32List() *SFixed32ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Sfixed32List); ok {
		return x.Sfixed32List
	}
	return nil
}

func (x *MessageFieldValue) GetSfixed64List() *SFixed64ListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_Sfixed64List); ok {
		return x.Sfixed64List
	}
	return nil
}

func (x *MessageFieldValue) GetBoolList() *BoolListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_BoolList); ok {
		return x.BoolList
	}
	return nil
}

func (x *MessageFieldValue) GetStringList() *StringListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *MessageFieldValue) GetBytesList() *BytesListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_BytesList); ok {
		return x.BytesList
	}
	return nil
}

func (x *MessageFieldValue) GetMessageList() *MessageListValue {
	if x, ok := x.GetValue().(*MessageFieldValue_MessageList); ok {
		return x.MessageList
	}
	return nil
}

type isMessageFieldValue_Value interface {
	isMessageFieldValue_Value()
}

type MessageFieldValue_By struct {
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	By string `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type MessageFieldValue_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof"`
}

type MessageFieldValue_Float struct {
	Float float32 `protobuf:"fixed32,4,opt,name=float,proto3,oneof"`
}

type MessageFieldValue_Int32 struct {
	Int32 int32 `protobuf:"varint,5,opt,name=int32,proto3,oneof"`
}

type MessageFieldValue_Int64 struct {
	Int64 int64 `protobuf:"varint,6,opt,name=int64,proto3,oneof"`
}

type MessageFieldValue_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,7,opt,name=uint32,proto3,oneof"`
}

type MessageFieldValue_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,8,opt,name=uint64,proto3,oneof"`
}

type MessageFieldValue_Sint32 struct {
	Sint32 int32 `protobuf:"zigzag32,9,opt,name=sint32,proto3,oneof"`
}

type MessageFieldValue_Sint64 struct {
	Sint64 int64 `protobuf:"zigzag64,10,opt,name=sint64,proto3,oneof"`
}

type MessageFieldValue_Fixed32 struct {
	Fixed32 uint32 `protobuf:"fixed32,11,opt,name=fixed32,proto3,oneof"`
}

type MessageFieldValue_Fixed64 struct {
	Fixed64 uint64 `protobuf:"fixed64,12,opt,name=fixed64,proto3,oneof"`
}

type MessageFieldValue_Sfixed32 struct {
	Sfixed32 int32 `protobuf:"fixed32,13,opt,name=sfixed32,proto3,oneof"`
}

type MessageFieldValue_Sfixed64 struct {
	Sfixed64 int64 `protobuf:"fixed64,14,opt,name=sfixed64,proto3,oneof"`
}

type MessageFieldValue_Bool struct {
	Bool bool `protobuf:"varint,15,opt,name=bool,proto3,oneof"`
}

type MessageFieldValue_String_ struct {
	String_ string `protobuf:"bytes,16,opt,name=string,proto3,oneof"`
}

type MessageFieldValue_Bytes struct {
	Bytes []byte `protobuf:"bytes,17,opt,name=bytes,proto3,oneof"`
}

type MessageFieldValue_Message struct {
	Message *MessageValue `protobuf:"bytes,18,opt,name=message,proto3,oneof"`
}

type MessageFieldValue_Enum struct {
	Enum string `protobuf:"bytes,19,opt,name=enum,proto3,oneof"`
}

type MessageFieldValue_Env struct {
	Env string `protobuf:"bytes,20,opt,name=env,proto3,oneof"`
}

type MessageFieldValue_DoubleList struct {
	DoubleList *DoubleListValue `protobuf:"bytes,21,opt,name=double_list,json=doubleList,proto3,oneof"`
}

type MessageFieldValue_FloatList struct {
	FloatList *FloatListValue `protobuf:"bytes,22,opt,name=float_list,json=floatList,proto3,oneof"`
}

type MessageFieldValue_Int32List struct {
	Int32List *Int32ListValue `protobuf:"bytes,23,opt,name=int32_list,json=int32List,proto3,oneof"`
}

type MessageFieldValue_Int64List struct {
	Int64List *Int64ListValue `protobuf:"bytes,24,opt,name=int64_list,json=int64List,proto3,oneof"`
}

type MessageFieldValue_Uint32List struct {
	Uint32List *Uint32ListValue `protobuf:"bytes,25,opt,name=uint32_list,json=uint32List,proto3,oneof"`
}

type MessageFieldValue_Uint64List struct {
	Uint64List *Uint64ListValue `protobuf:"bytes,26,opt,name=uint64_list,json=uint64List,proto3,oneof"`
}

type MessageFieldValue_Sint32List struct {
	Sint32List *Sint32ListValue `protobuf:"bytes,27,opt,name=sint32_list,json=sint32List,proto3,oneof"`
}

type MessageFieldValue_Sint64List struct {
	Sint64List *Sint64ListValue `protobuf:"bytes,28,opt,name=sint64_list,json=sint64List,proto3,oneof"`
}

type MessageFieldValue_Fixed32List struct {
	Fixed32List *Fixed32ListValue `protobuf:"bytes,29,opt,name=fixed32_list,json=fixed32List,proto3,oneof"`
}

type MessageFieldValue_Fixed64List struct {
	Fixed64List *Fixed64ListValue `protobuf:"bytes,30,opt,name=fixed64_list,json=fixed64List,proto3,oneof"`
}

type MessageFieldValue_Sfixed32List struct {
	Sfixed32List *SFixed32ListValue `protobuf:"bytes,31,opt,name=sfixed32_list,json=sfixed32List,proto3,oneof"`
}

type MessageFieldValue_Sfixed64List struct {
	Sfixed64List *SFixed64ListValue `protobuf:"bytes,32,opt,name=sfixed64_list,json=sfixed64List,proto3,oneof"`
}

type MessageFieldValue_BoolList struct {
	BoolList *BoolListValue `protobuf:"bytes,33,opt,name=bool_list,json=boolList,proto3,oneof"`
}

type MessageFieldValue_StringList struct {
	StringList *StringListValue `protobuf:"bytes,34,opt,name=string_list,json=stringList,proto3,oneof"`
}

type MessageFieldValue_BytesList struct {
	BytesList *BytesListValue `protobuf:"bytes,35,opt,name=bytes_list,json=bytesList,proto3,oneof"`
}

type MessageFieldValue_MessageList struct {
	MessageList *MessageListValue `protobuf:"bytes,36,opt,name=message_list,json=messageList,proto3,oneof"`
}

func (*MessageFieldValue_By) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Double) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Float) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Int32) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Int64) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Uint32) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Uint64) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sint32) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sint64) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Fixed32) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Fixed64) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sfixed32) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sfixed64) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Bool) isMessageFieldValue_Value() {}

func (*MessageFieldValue_String_) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Bytes) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Message) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Enum) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Env) isMessageFieldValue_Value() {}

func (*MessageFieldValue_DoubleList) isMessageFieldValue_Value() {}

func (*MessageFieldValue_FloatList) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Int32List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Int64List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Uint32List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Uint64List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sint32List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sint64List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Fixed32List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Fixed64List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sfixed32List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_Sfixed64List) isMessageFieldValue_Value() {}

func (*MessageFieldValue_BoolList) isMessageFieldValue_Value() {}

func (*MessageFieldValue_StringList) isMessageFieldValue_Value() {}

func (*MessageFieldValue_BytesList) isMessageFieldValue_Value() {}

func (*MessageFieldValue_MessageList) isMessageFieldValue_Value() {}

type DoubleListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *DoubleListValue) Reset() {
	*x = DoubleListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleListValue) ProtoMessage() {}

func (x *DoubleListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleListValue.ProtoReflect.Descriptor instead.
func (*DoubleListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{17}
}

func (x *DoubleListValue) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type FloatListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []float32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FloatListValue) Reset() {
	*x = FloatListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatListValue) ProtoMessage() {}

func (x *FloatListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatListValue.ProtoReflect.Descriptor instead.
func (*FloatListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{18}
}

func (x *FloatListValue) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Int32ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int32ListValue) Reset() {
	*x = Int32ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32ListValue) ProtoMessage() {}

func (x *Int32ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32ListValue.ProtoReflect.Descriptor instead.
func (*Int32ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{19}
}

func (x *Int32ListValue) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Int64ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Int64ListValue) Reset() {
	*x = Int64ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64ListValue) ProtoMessage() {}

func (x *Int64ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64ListValue.ProtoReflect.Descriptor instead.
func (*Int64ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{20}
}

func (x *Int64ListValue) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Uint32ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Uint32ListValue) Reset() {
	*x = Uint32ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32ListValue) ProtoMessage() {}

func (x *Uint32ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32ListValue.ProtoReflect.Descriptor instead.
func (*Uint32ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{21}
}

func (x *Uint32ListValue) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Uint64ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Uint64ListValue) Reset() {
	*x = Uint64ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64ListValue) ProtoMessage() {}

func (x *Uint64ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64ListValue.ProtoReflect.Descriptor instead.
func (*Uint64ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{22}
}

func (x *Uint64ListValue) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Sint32ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"zigzag32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Sint32ListValue) Reset() {
	*x = Sint32ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sint32ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sint32ListValue) ProtoMessage() {}

func (x *Sint32ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sint32ListValue.ProtoReflect.Descriptor instead.
func (*Sint32ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{23}
}

func (x *Sint32ListValue) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Sint64ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"zigzag64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Sint64ListValue) Reset() {
	*x = Sint64ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sint64ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sint64ListValue) ProtoMessage() {}

func (x *Sint64ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sint64ListValue.ProtoReflect.Descriptor instead.
func (*Sint64ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{24}
}

func (x *Sint64ListValue) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Fixed32ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Fixed32ListValue) Reset() {
	*x = Fixed32ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fixed32ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed32ListValue) ProtoMessage() {}

func (x *Fixed32ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed32ListValue.ProtoReflect.Descriptor instead.
func (*Fixed32ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{25}
}

func (x *Fixed32ListValue) GetValues() []uint32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type Fixed64ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Fixed64ListValue) Reset() {
	*x = Fixed64ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fixed64ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed64ListValue) ProtoMessage() {}

func (x *Fixed64ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed64ListValue.ProtoReflect.Descriptor instead.
func (*Fixed64ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{26}
}

func (x *Fixed64ListValue) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type SFixed32ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int32 `protobuf:"fixed32,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *SFixed32ListValue) Reset() {
	*x = SFixed32ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFixed32ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed32ListValue) ProtoMessage() {}

func (x *SFixed32ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed32ListValue.ProtoReflect.Descriptor instead.
func (*SFixed32ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{27}
}

func (x *SFixed32ListValue) GetValues() []int32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type SFixed64ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []int64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *SFixed64ListValue) Reset() {
	*x = SFixed64ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SFixed64ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed64ListValue) ProtoMessage() {}

func (x *SFixed64ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed64ListValue.ProtoReflect.Descriptor instead.
func (*SFixed64ListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{28}
}

func (x *SFixed64ListValue) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type BoolListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []bool `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *BoolListValue) Reset() {
	*x = BoolListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolListValue) ProtoMessage() {}

func (x *BoolListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolListValue.ProtoReflect.Descriptor instead.
func (*BoolListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{29}
}

func (x *BoolListValue) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type StringListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringListValue) Reset() {
	*x = StringListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListValue) ProtoMessage() {}

func (x *StringListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringListValue.ProtoReflect.Descriptor instead.
func (*StringListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{30}
}

func (x *StringListValue) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type BytesListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *BytesListValue) Reset() {
	*x = BytesListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesListValue) ProtoMessage() {}

func (x *BytesListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesListValue.ProtoReflect.Descriptor instead.
func (*BytesListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{31}
}

func (x *BytesListValue) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type MessageListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*MessageValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MessageListValue) Reset() {
	*x = MessageListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageListValue) ProtoMessage() {}

func (x *MessageListValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageListValue.ProtoReflect.Descriptor instead.
func (*MessageListValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{32}
}

func (x *MessageListValue) GetValues() []*MessageValue {
	if x != nil {
		return x.Values
	}
	return nil
}

var file_grpc_federation_federation_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.service",
		Tag:           "bytes,70000,opt,name=service",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*MethodRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.method",
		Tag:           "bytes,70000,opt,name=method",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.message",
		Tag:           "bytes,70000,opt,name=message",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.field",
		Tag:           "bytes,70000,opt,name=field",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*EnumRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.enum",
		Tag:           "bytes,70000,opt,name=enum",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EnumValueRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.enum_value",
		Tag:           "bytes,70000,opt,name=enum_value",
		Filename:      "grpc/federation/federation.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional grpc.federation.ServiceRule service = 70000;
	E_Service = &file_grpc_federation_federation_proto_extTypes[0]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional grpc.federation.MethodRule method = 70000;
	E_Method = &file_grpc_federation_federation_proto_extTypes[1]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional grpc.federation.MessageRule message = 70000;
	E_Message = &file_grpc_federation_federation_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional grpc.federation.FieldRule field = 70000;
	E_Field = &file_grpc_federation_federation_proto_extTypes[3]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional grpc.federation.EnumRule enum = 70000;
	E_Enum = &file_grpc_federation_federation_proto_extTypes[4]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional grpc.federation.EnumValueRule enum_value = 70000;
	E_EnumValue = &file_grpc_federation_federation_proto_extTypes[5]
)

var File_grpc_federation_federation_proto protoreflect.FileDescriptor

var file_grpc_federation_federation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x3f, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22,
	0x4f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x26, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0xa8,
	0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x79, 0x0a, 0x13, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfe, 0x0c, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x62, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x43, 0x0a,
	0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e,
	0x64, 0x22, 0x9e, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69,
	0x6e, 0x64, 0x22, 0x91, 0x0d, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x62, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x10, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x62,
	0x79, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x12, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x43, 0x0a, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5e, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0x82, 0x0d, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x10, 0x0a, 0x02,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x62, 0x79, 0x12, 0x18,
	0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x18, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18,
	0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x1c, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1c,
	0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x10,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x29,
	0x0a, 0x0f, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x29, 0x0a, 0x0f, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x12, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x06, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x2b, 0x0a, 0x11, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x2b, 0x0a, 0x11, 0x53, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x10, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x0d,
	0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x28, 0x0a, 0x0e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x10, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x3a, 0x59, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x55, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x59, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x3a, 0x51, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x4d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x3a, 0x62, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x65, 0x72, 0x63, 0x61, 0x72, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x46, 0x58, 0xaa, 0x02, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x2e,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x0f, 0x47, 0x72, 0x70,
	0x63, 0x5c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x1b, 0x47,
	0x72, 0x70, 0x63, 0x5c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x47, 0x72, 0x70,
	0x63, 0x3a, 0x3a, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_federation_federation_proto_rawDescOnce sync.Once
	file_grpc_federation_federation_proto_rawDescData = file_grpc_federation_federation_proto_rawDesc
)

func file_grpc_federation_federation_proto_rawDescGZIP() []byte {
	file_grpc_federation_federation_proto_rawDescOnce.Do(func() {
		file_grpc_federation_federation_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_federation_federation_proto_rawDescData)
	})
	return file_grpc_federation_federation_proto_rawDescData
}

var file_grpc_federation_federation_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_grpc_federation_federation_proto_goTypes = []interface{}{
	(*EnumRule)(nil),                      // 0: grpc.federation.EnumRule
	(*EnumValueRule)(nil),                 // 1: grpc.federation.EnumValueRule
	(*ServiceRule)(nil),                   // 2: grpc.federation.ServiceRule
	(*ServiceDependency)(nil),             // 3: grpc.federation.ServiceDependency
	(*MethodRule)(nil),                    // 4: grpc.federation.MethodRule
	(*MessageRule)(nil),                   // 5: grpc.federation.MessageRule
	(*Resolver)(nil),                      // 6: grpc.federation.Resolver
	(*RetryPolicy)(nil),                   // 7: grpc.federation.RetryPolicy
	(*RetryPolicyConstant)(nil),           // 8: grpc.federation.RetryPolicyConstant
	(*RetryPolicyExponential)(nil),        // 9: grpc.federation.RetryPolicyExponential
	(*MethodRequest)(nil),                 // 10: grpc.federation.MethodRequest
	(*MethodResponse)(nil),                // 11: grpc.federation.MethodResponse
	(*Message)(nil),                       // 12: grpc.federation.Message
	(*Argument)(nil),                      // 13: grpc.federation.Argument
	(*FieldRule)(nil),                     // 14: grpc.federation.FieldRule
	(*MessageValue)(nil),                  // 15: grpc.federation.MessageValue
	(*MessageFieldValue)(nil),             // 16: grpc.federation.MessageFieldValue
	(*DoubleListValue)(nil),               // 17: grpc.federation.DoubleListValue
	(*FloatListValue)(nil),                // 18: grpc.federation.FloatListValue
	(*Int32ListValue)(nil),                // 19: grpc.federation.Int32ListValue
	(*Int64ListValue)(nil),                // 20: grpc.federation.Int64ListValue
	(*Uint32ListValue)(nil),               // 21: grpc.federation.Uint32ListValue
	(*Uint64ListValue)(nil),               // 22: grpc.federation.Uint64ListValue
	(*Sint32ListValue)(nil),               // 23: grpc.federation.Sint32ListValue
	(*Sint64ListValue)(nil),               // 24: grpc.federation.Sint64ListValue
	(*Fixed32ListValue)(nil),              // 25: grpc.federation.Fixed32ListValue
	(*Fixed64ListValue)(nil),              // 26: grpc.federation.Fixed64ListValue
	(*SFixed32ListValue)(nil),             // 27: grpc.federation.SFixed32ListValue
	(*SFixed64ListValue)(nil),             // 28: grpc.federation.SFixed64ListValue
	(*BoolListValue)(nil),                 // 29: grpc.federation.BoolListValue
	(*StringListValue)(nil),               // 30: grpc.federation.StringListValue
	(*BytesListValue)(nil),                // 31: grpc.federation.BytesListValue
	(*MessageListValue)(nil),              // 32: grpc.federation.MessageListValue
	(*descriptorpb.ServiceOptions)(nil),   // 33: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),    // 34: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),   // 35: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),     // 36: google.protobuf.FieldOptions
	(*descriptorpb.EnumOptions)(nil),      // 37: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil), // 38: google.protobuf.EnumValueOptions
}
var file_grpc_federation_federation_proto_depIdxs = []int32{
	3,  // 0: grpc.federation.ServiceRule.dependencies:type_name -> grpc.federation.ServiceDependency
	6,  // 1: grpc.federation.MessageRule.resolver:type_name -> grpc.federation.Resolver
	12, // 2: grpc.federation.MessageRule.messages:type_name -> grpc.federation.Message
	10, // 3: grpc.federation.Resolver.request:type_name -> grpc.federation.MethodRequest
	11, // 4: grpc.federation.Resolver.response:type_name -> grpc.federation.MethodResponse
	7,  // 5: grpc.federation.Resolver.retry:type_name -> grpc.federation.RetryPolicy
	8,  // 6: grpc.federation.RetryPolicy.constant:type_name -> grpc.federation.RetryPolicyConstant
	9,  // 7: grpc.federation.RetryPolicy.exponential:type_name -> grpc.federation.RetryPolicyExponential
	15, // 8: grpc.federation.MethodRequest.message:type_name -> grpc.federation.MessageValue
	17, // 9: grpc.federation.MethodRequest.double_list:type_name -> grpc.federation.DoubleListValue
	18, // 10: grpc.federation.MethodRequest.float_list:type_name -> grpc.federation.FloatListValue
	19, // 11: grpc.federation.MethodRequest.int32_list:type_name -> grpc.federation.Int32ListValue
	20, // 12: grpc.federation.MethodRequest.int64_list:type_name -> grpc.federation.Int64ListValue
	21, // 13: grpc.federation.MethodRequest.uint32_list:type_name -> grpc.federation.Uint32ListValue
	22, // 14: grpc.federation.MethodRequest.uint64_list:type_name -> grpc.federation.Uint64ListValue
	23, // 15: grpc.federation.MethodRequest.sint32_list:type_name -> grpc.federation.Sint32ListValue
	24, // 16: grpc.federation.MethodRequest.sint64_list:type_name -> grpc.federation.Sint64ListValue
	25, // 17: grpc.federation.MethodRequest.fixed32_list:type_name -> grpc.federation.Fixed32ListValue
	26, // 18: grpc.federation.MethodRequest.fixed64_list:type_name -> grpc.federation.Fixed64ListValue
	27, // 19: grpc.federation.MethodRequest.sfixed32_list:type_name -> grpc.federation.SFixed32ListValue
	28, // 20: grpc.federation.MethodRequest.sfixed64_list:type_name -> grpc.federation.SFixed64ListValue
	29, // 21: grpc.federation.MethodRequest.bool_list:type_name -> grpc.federation.BoolListValue
	30, // 22: grpc.federation.MethodRequest.string_list:type_name -> grpc.federation.StringListValue
	31, // 23: grpc.federation.MethodRequest.bytes_list:type_name -> grpc.federation.BytesListValue
	32, // 24: grpc.federation.MethodRequest.message_list:type_name -> grpc.federation.MessageListValue
	13, // 25: grpc.federation.Message.args:type_name -> grpc.federation.Argument
	15, // 26: grpc.federation.Argument.message:type_name -> grpc.federation.MessageValue
	17, // 27: grpc.federation.Argument.double_list:type_name -> grpc.federation.DoubleListValue
	18, // 28: grpc.federation.Argument.float_list:type_name -> grpc.federation.FloatListValue
	19, // 29: grpc.federation.Argument.int32_list:type_name -> grpc.federation.Int32ListValue
	20, // 30: grpc.federation.Argument.int64_list:type_name -> grpc.federation.Int64ListValue
	21, // 31: grpc.federation.Argument.uint32_list:type_name -> grpc.federation.Uint32ListValue
	22, // 32: grpc.federation.Argument.uint64_list:type_name -> grpc.federation.Uint64ListValue
	23, // 33: grpc.federation.Argument.sint32_list:type_name -> grpc.federation.Sint32ListValue
	24, // 34: grpc.federation.Argument.sint64_list:type_name -> grpc.federation.Sint64ListValue
	25, // 35: grpc.federation.Argument.fixed32_list:type_name -> grpc.federation.Fixed32ListValue
	26, // 36: grpc.federation.Argument.fixed64_list:type_name -> grpc.federation.Fixed64ListValue
	27, // 37: grpc.federation.Argument.sfixed32_list:type_name -> grpc.federation.SFixed32ListValue
	28, // 38: grpc.federation.Argument.sfixed64_list:type_name -> grpc.federation.SFixed64ListValue
	29, // 39: grpc.federation.Argument.bool_list:type_name -> grpc.federation.BoolListValue
	30, // 40: grpc.federation.Argument.string_list:type_name -> grpc.federation.StringListValue
	31, // 41: grpc.federation.Argument.bytes_list:type_name -> grpc.federation.BytesListValue
	32, // 42: grpc.federation.Argument.message_list:type_name -> grpc.federation.MessageListValue
	15, // 43: grpc.federation.FieldRule.message:type_name -> grpc.federation.MessageValue
	17, // 44: grpc.federation.FieldRule.double_list:type_name -> grpc.federation.DoubleListValue
	18, // 45: grpc.federation.FieldRule.float_list:type_name -> grpc.federation.FloatListValue
	19, // 46: grpc.federation.FieldRule.int32_list:type_name -> grpc.federation.Int32ListValue
	20, // 47: grpc.federation.FieldRule.int64_list:type_name -> grpc.federation.Int64ListValue
	21, // 48: grpc.federation.FieldRule.uint32_list:type_name -> grpc.federation.Uint32ListValue
	22, // 49: grpc.federation.FieldRule.uint64_list:type_name -> grpc.federation.Uint64ListValue
	23, // 50: grpc.federation.FieldRule.sint32_list:type_name -> grpc.federation.Sint32ListValue
	24, // 51: grpc.federation.FieldRule.sint64_list:type_name -> grpc.federation.Sint64ListValue
	25, // 52: grpc.federation.FieldRule.fixed32_list:type_name -> grpc.federation.Fixed32ListValue
	26, // 53: grpc.federation.FieldRule.fixed64_list:type_name -> grpc.federation.Fixed64ListValue
	27, // 54: grpc.federation.FieldRule.sfixed32_list:type_name -> grpc.federation.SFixed32ListValue
	28, // 55: grpc.federation.FieldRule.sfixed64_list:type_name -> grpc.federation.SFixed64ListValue
	29, // 56: grpc.federation.FieldRule.bool_list:type_name -> grpc.federation.BoolListValue
	30, // 57: grpc.federation.FieldRule.string_list:type_name -> grpc.federation.StringListValue
	31, // 58: grpc.federation.FieldRule.bytes_list:type_name -> grpc.federation.BytesListValue
	32, // 59: grpc.federation.FieldRule.message_list:type_name -> grpc.federation.MessageListValue
	16, // 60: grpc.federation.MessageValue.fields:type_name -> grpc.federation.MessageFieldValue
	15, // 61: grpc.federation.MessageFieldValue.message:type_name -> grpc.federation.MessageValue
	17, // 62: grpc.federation.MessageFieldValue.double_list:type_name -> grpc.federation.DoubleListValue
	18, // 63: grpc.federation.MessageFieldValue.float_list:type_name -> grpc.federation.FloatListValue
	19, // 64: grpc.federation.MessageFieldValue.int32_list:type_name -> grpc.federation.Int32ListValue
	20, // 65: grpc.federation.MessageFieldValue.int64_list:type_name -> grpc.federation.Int64ListValue
	21, // 66: grpc.federation.MessageFieldValue.uint32_list:type_name -> grpc.federation.Uint32ListValue
	22, // 67: grpc.federation.MessageFieldValue.uint64_list:type_name -> grpc.federation.Uint64ListValue
	23, // 68: grpc.federation.MessageFieldValue.sint32_list:type_name -> grpc.federation.Sint32ListValue
	24, // 69: grpc.federation.MessageFieldValue.sint64_list:type_name -> grpc.federation.Sint64ListValue
	25, // 70: grpc.federation.MessageFieldValue.fixed32_list:type_name -> grpc.federation.Fixed32ListValue
	26, // 71: grpc.federation.MessageFieldValue.fixed64_list:type_name -> grpc.federation.Fixed64ListValue
	27, // 72: grpc.federation.MessageFieldValue.sfixed32_list:type_name -> grpc.federation.SFixed32ListValue
	28, // 73: grpc.federation.MessageFieldValue.sfixed64_list:type_name -> grpc.federation.SFixed64ListValue
	29, // 74: grpc.federation.MessageFieldValue.bool_list:type_name -> grpc.federation.BoolListValue
	30, // 75: grpc.federation.MessageFieldValue.string_list:type_name -> grpc.federation.StringListValue
	31, // 76: grpc.federation.MessageFieldValue.bytes_list:type_name -> grpc.federation.BytesListValue
	32, // 77: grpc.federation.MessageFieldValue.message_list:type_name -> grpc.federation.MessageListValue
	15, // 78: grpc.federation.MessageListValue.values:type_name -> grpc.federation.MessageValue
	33, // 79: grpc.federation.service:extendee -> google.protobuf.ServiceOptions
	34, // 80: grpc.federation.method:extendee -> google.protobuf.MethodOptions
	35, // 81: grpc.federation.message:extendee -> google.protobuf.MessageOptions
	36, // 82: grpc.federation.field:extendee -> google.protobuf.FieldOptions
	37, // 83: grpc.federation.enum:extendee -> google.protobuf.EnumOptions
	38, // 84: grpc.federation.enum_value:extendee -> google.protobuf.EnumValueOptions
	2,  // 85: grpc.federation.service:type_name -> grpc.federation.ServiceRule
	4,  // 86: grpc.federation.method:type_name -> grpc.federation.MethodRule
	5,  // 87: grpc.federation.message:type_name -> grpc.federation.MessageRule
	14, // 88: grpc.federation.field:type_name -> grpc.federation.FieldRule
	0,  // 89: grpc.federation.enum:type_name -> grpc.federation.EnumRule
	1,  // 90: grpc.federation.enum_value:type_name -> grpc.federation.EnumValueRule
	91, // [91:91] is the sub-list for method output_type
	91, // [91:91] is the sub-list for method input_type
	85, // [85:91] is the sub-list for extension type_name
	79, // [79:85] is the sub-list for extension extendee
	0,  // [0:79] is the sub-list for field type_name
}

func init() { file_grpc_federation_federation_proto_init() }
func file_grpc_federation_federation_proto_init() {
	if File_grpc_federation_federation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_federation_federation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyExponential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sint32ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sint64ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fixed32ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fixed64ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFixed32ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SFixed64ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_federation_federation_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*RetryPolicy_Constant)(nil),
		(*RetryPolicy_Exponential)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MethodRequest_By)(nil),
		(*MethodRequest_Double)(nil),
		(*MethodRequest_Float)(nil),
		(*MethodRequest_Int32)(nil),
		(*MethodRequest_Int64)(nil),
		(*MethodRequest_Uint32)(nil),
		(*MethodRequest_Uint64)(nil),
		(*MethodRequest_Sint32)(nil),
		(*MethodRequest_Sint64)(nil),
		(*MethodRequest_Fixed32)(nil),
		(*MethodRequest_Fixed64)(nil),
		(*MethodRequest_Sfixed32)(nil),
		(*MethodRequest_Sfixed64)(nil),
		(*MethodRequest_Bool)(nil),
		(*MethodRequest_String_)(nil),
		(*MethodRequest_Bytes)(nil),
		(*MethodRequest_Message)(nil),
		(*MethodRequest_Enum)(nil),
		(*MethodRequest_Env)(nil),
		(*MethodRequest_DoubleList)(nil),
		(*MethodRequest_FloatList)(nil),
		(*MethodRequest_Int32List)(nil),
		(*MethodRequest_Int64List)(nil),
		(*MethodRequest_Uint32List)(nil),
		(*MethodRequest_Uint64List)(nil),
		(*MethodRequest_Sint32List)(nil),
		(*MethodRequest_Sint64List)(nil),
		(*MethodRequest_Fixed32List)(nil),
		(*MethodRequest_Fixed64List)(nil),
		(*MethodRequest_Sfixed32List)(nil),
		(*MethodRequest_Sfixed64List)(nil),
		(*MethodRequest_BoolList)(nil),
		(*MethodRequest_StringList)(nil),
		(*MethodRequest_BytesList)(nil),
		(*MethodRequest_MessageList)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Argument_By)(nil),
		(*Argument_Inline)(nil),
		(*Argument_Double)(nil),
		(*Argument_Float)(nil),
		(*Argument_Int32)(nil),
		(*Argument_Int64)(nil),
		(*Argument_Uint32)(nil),
		(*Argument_Uint64)(nil),
		(*Argument_Sint32)(nil),
		(*Argument_Sint64)(nil),
		(*Argument_Fixed32)(nil),
		(*Argument_Fixed64)(nil),
		(*Argument_Sfixed32)(nil),
		(*Argument_Sfixed64)(nil),
		(*Argument_Bool)(nil),
		(*Argument_String_)(nil),
		(*Argument_Bytes)(nil),
		(*Argument_Message)(nil),
		(*Argument_Enum)(nil),
		(*Argument_Env)(nil),
		(*Argument_DoubleList)(nil),
		(*Argument_FloatList)(nil),
		(*Argument_Int32List)(nil),
		(*Argument_Int64List)(nil),
		(*Argument_Uint32List)(nil),
		(*Argument_Uint64List)(nil),
		(*Argument_Sint32List)(nil),
		(*Argument_Sint64List)(nil),
		(*Argument_Fixed32List)(nil),
		(*Argument_Fixed64List)(nil),
		(*Argument_Sfixed32List)(nil),
		(*Argument_Sfixed64List)(nil),
		(*Argument_BoolList)(nil),
		(*Argument_StringList)(nil),
		(*Argument_BytesList)(nil),
		(*Argument_MessageList)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FieldRule_CustomResolver)(nil),
		(*FieldRule_By)(nil),
		(*FieldRule_Double)(nil),
		(*FieldRule_Float)(nil),
		(*FieldRule_Int32)(nil),
		(*FieldRule_Int64)(nil),
		(*FieldRule_Uint32)(nil),
		(*FieldRule_Uint64)(nil),
		(*FieldRule_Sint32)(nil),
		(*FieldRule_Sint64)(nil),
		(*FieldRule_Fixed32)(nil),
		(*FieldRule_Fixed64)(nil),
		(*FieldRule_Sfixed32)(nil),
		(*FieldRule_Sfixed64)(nil),
		(*FieldRule_Bool)(nil),
		(*FieldRule_String_)(nil),
		(*FieldRule_Bytes)(nil),
		(*FieldRule_Message)(nil),
		(*FieldRule_Enum)(nil),
		(*FieldRule_Env)(nil),
		(*FieldRule_DoubleList)(nil),
		(*FieldRule_FloatList)(nil),
		(*FieldRule_Int32List)(nil),
		(*FieldRule_Int64List)(nil),
		(*FieldRule_Uint32List)(nil),
		(*FieldRule_Uint64List)(nil),
		(*FieldRule_Sint32List)(nil),
		(*FieldRule_Sint64List)(nil),
		(*FieldRule_Fixed32List)(nil),
		(*FieldRule_Fixed64List)(nil),
		(*FieldRule_Sfixed32List)(nil),
		(*FieldRule_Sfixed64List)(nil),
		(*FieldRule_BoolList)(nil),
		(*FieldRule_StringList)(nil),
		(*FieldRule_BytesList)(nil),
		(*FieldRule_MessageList)(nil),
		(*FieldRule_Alias)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*MessageFieldValue_By)(nil),
		(*MessageFieldValue_Double)(nil),
		(*MessageFieldValue_Float)(nil),
		(*MessageFieldValue_Int32)(nil),
		(*MessageFieldValue_Int64)(nil),
		(*MessageFieldValue_Uint32)(nil),
		(*MessageFieldValue_Uint64)(nil),
		(*MessageFieldValue_Sint32)(nil),
		(*MessageFieldValue_Sint64)(nil),
		(*MessageFieldValue_Fixed32)(nil),
		(*MessageFieldValue_Fixed64)(nil),
		(*MessageFieldValue_Sfixed32)(nil),
		(*MessageFieldValue_Sfixed64)(nil),
		(*MessageFieldValue_Bool)(nil),
		(*MessageFieldValue_String_)(nil),
		(*MessageFieldValue_Bytes)(nil),
		(*MessageFieldValue_Message)(nil),
		(*MessageFieldValue_Enum)(nil),
		(*MessageFieldValue_Env)(nil),
		(*MessageFieldValue_DoubleList)(nil),
		(*MessageFieldValue_FloatList)(nil),
		(*MessageFieldValue_Int32List)(nil),
		(*MessageFieldValue_Int64List)(nil),
		(*MessageFieldValue_Uint32List)(nil),
		(*MessageFieldValue_Uint64List)(nil),
		(*MessageFieldValue_Sint32List)(nil),
		(*MessageFieldValue_Sint64List)(nil),
		(*MessageFieldValue_Fixed32List)(nil),
		(*MessageFieldValue_Fixed64List)(nil),
		(*MessageFieldValue_Sfixed32List)(nil),
		(*MessageFieldValue_Sfixed64List)(nil),
		(*MessageFieldValue_BoolList)(nil),
		(*MessageFieldValue_StringList)(nil),
		(*MessageFieldValue_BytesList)(nil),
		(*MessageFieldValue_MessageList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_federation_federation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 6,
			NumServices:   0,
		},
		GoTypes:           file_grpc_federation_federation_proto_goTypes,
		DependencyIndexes: file_grpc_federation_federation_proto_depIdxs,
		MessageInfos:      file_grpc_federation_federation_proto_msgTypes,
		ExtensionInfos:    file_grpc_federation_federation_proto_extTypes,
	}.Build()
	File_grpc_federation_federation_proto = out.File
	file_grpc_federation_federation_proto_rawDesc = nil
	file_grpc_federation_federation_proto_goTypes = nil
	file_grpc_federation_federation_proto_depIdxs = nil
}
