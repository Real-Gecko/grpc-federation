syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";
import "content/content.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc Get(GetRequest) returns (GetResponse) {};
}

message GetRequest {
  string id = 1;
}

message GetResponse {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "content.ContentService/GetContent"
        request: [
          { field: "by_field",           by: "$.id" },
          { field: "double_field",       double: 1.23 },
          { field: "doubles_field",      doubles: [ 4.56, 7.89 ]},
          { field: "float_field",        float: 4.56 },
          { field: "floats_field",       floats: [ 7.89, 1.23 ]},
          { field: "int32_field",        int32: -1 },
          { field: "int32s_field",       int32s: [ -2, -3 ]},
          { field: "int64_field",        int64: -4 },
          { field: "int64s_field",       int64s: [ -5, -6 ]},
          { field: "uint32_field",       uint32: 1 },
          { field: "uint32s_field",      uint32s: [ 2, 3 ]},
          { field: "uint64_field",       uint64: 4 },
          { field: "uint64s_field",      uint64s: [ 5, 6 ]},
          { field: "sint32_field",       sint32: -7 },
          { field: "sint32s_field",      sint32s: [ -8, -9 ]},
          { field: "sint64_field",       sint64: -10 },
          { field: "sint64s_field",      sint64s: [ -11, -12 ]},
          { field: "fixed32_field",      fixed32: 10 },
          { field: "fixed32s_field",     fixed32s: [ 11, 12 ]},
          { field: "fixed64_field",      fixed64: 13 },
          { field: "fixed64s_field",     fixed64s: [ 14, 15 ]},
          { field: "sfixed32_field",     sfixed32: -14 },
          { field: "sfixed32s_field",    sfixed32s: [ -15, -16 ]},
          { field: "sfixed64_field",     sfixed64: -17 },
          { field: "sfixed64s_field",    sfixed64s: [ -18, -19 ]},
          { field: "bool_field",         bool: true },
          { field: "bools_field",        bools: [ true, false ]},
          { field: "string_field",       string: "foo" },
          { field: "strings_field",      strings: ["hello", "world"]},
          { field: "byte_string_field",  byte_string: "foo" },
          { field: "byte_strings_field", byte_strings: ["foo", "bar"]},
          { field: "enum_field",         enum: "content.CONTENT_TYPE_1" },
          { field: "enums_field",        enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"]},
          { field: "env_field",          env: "foo" },
          { field: "envs_field",         envs: ["foo", "bar"]},
          { field: "messages_field",     messages: [{ name: "content.Content" }, { name: "content.Content" }]},
          { 
            field: "message_field"
            message {
              name: "content.Content"
              fields: [
                { field: "double_field",       double: 1.23 },
                { field: "doubles_field",      doubles: [ 4.56, 7.89 ]},
                { field: "float_field",        float: 4.56 },
                { field: "floats_field",       floats: [ 7.89, 1.23 ]},
                { field: "int32_field",        int32: -1 },
                { field: "int32s_field",       int32s: [ -2, -3 ]},
                { field: "int64_field",        int64: -4 },
                { field: "int64s_field",       int64s: [ -5, -6 ]},
                { field: "uint32_field",       uint32: 1 },
                { field: "uint32s_field",      uint32s: [ 2, 3 ]},
                { field: "uint64_field",       uint64: 4 },
                { field: "uint64s_field",      uint64s: [ 5, 6 ]},
                { field: "sint32_field",       sint32: -7 },
                { field: "sint32s_field",      sint32s: [ -8, -9 ]},
                { field: "sint64_field",       sint64: -10 },
                { field: "sint64s_field",      sint64s: [ -11, -12 ]},
                { field: "fixed32_field",      fixed32: 10 },
                { field: "fixed32s_field",     fixed32s: [ 11, 12 ]},
                { field: "fixed64_field",      fixed64: 13 },
                { field: "fixed64s_field",     fixed64s: [ 14, 15 ]},
                { field: "sfixed32_field",     sfixed32: -14 },
                { field: "sfixed32s_field",    sfixed32s: [ -15, -16 ]},
                { field: "sfixed64_field",     sfixed64: -17 },
                { field: "sfixed64s_field",    sfixed64s: [ -18, -19 ]},
                { field: "bool_field",         bool: true },
                { field: "bools_field",        bools: [ true, false ]},
                { field: "string_field",       string: "foo" },
                { field: "strings_field",      strings: ["hello", "world"]},
                { field: "byte_string_field",  byte_string: "foo" },
                { field: "byte_strings_field", byte_strings: ["foo", "bar"]},
                { field: "messages_field",     messages: [{ name: "content.Content" }, { name: "content.Content" }]},
                { field: "enum_field",         enum: "content.CONTENT_TYPE_1" },
                { field: "enums_field",        enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"]},
                { field: "env_field",          env: "foo" },
                { field: "envs_field",         envs: ["foo", "bar"]}
              ]
            }
          }
        ]
      }
    }
    def { name: "content", by: "res.content" }
  };
  Content content  = 1 [(grpc.federation.field).by = "content"];
  int64 cel_expr = 2 [(grpc.federation.field).by = "content.int32_field + content.sint32_field"];
}

enum ContentType {
  option (grpc.federation.enum).alias = "content.ContentType";

  CONTENT_TYPE_1 = 0;
  CONTENT_TYPE_2 = 1;
  CONTENT_TYPE_3 = 2;
}

message Content {
  option (grpc.federation.message).alias = "content.Content";

  string by_field                   = 1;
  double double_field               = 2;
  repeated double doubles_field     = 3;
  float float_field                 = 4;
  repeated float floats_field       = 5;
  int32 int32_field                 = 6;
  repeated int32 int32s_field       = 7;
  int64 int64_field                 = 8;
  repeated int64 int64s_field       = 9;
  uint32 uint32_field               = 10;
  repeated uint32 uint32s_field     = 11;
  uint64 uint64_field               = 12;
  repeated uint64 uint64s_field     = 13;
  sint32 sint32_field               = 14;
  repeated sint32 sint32s_field     = 15;
  sint64 sint64_field               = 16;
  repeated sint64 sint64s_field     = 17;
  fixed32 fixed32_field             = 18;
  repeated fixed32 fixed32s_field   = 19;
  fixed64 fixed64_field             = 20;
  repeated fixed64 fixed64s_field   = 21;
  sfixed32 sfixed32_field           = 22;
  repeated sfixed32 sfixed32s_field = 23;
  sfixed64 sfixed64_field           = 24;
  repeated sfixed64 sfixed64s_field = 25;
  bool bool_field                   = 26;
  repeated bool bools_field         = 27;
  string string_field               = 28;
  repeated string strings_field     = 29;
  bytes byte_string_field           = 30;
  repeated bytes byte_strings_field = 31;
  ContentType enum_field            = 32;
  repeated ContentType enums_field  = 33;
  string env_field                  = 34;
  repeated string envs_field        = 35;
  Content message_field             = 36;
  repeated Content messages_field   = 37;
}
