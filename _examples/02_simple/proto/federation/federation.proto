syntax = "proto3";

package federation;

import "google/protobuf/any.proto";
import "grpc/federation/federation.proto";
import "post/post.proto";
import "user/user.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  option (.grpc.federation.message) = {
    def {
      name: "post"
      message {
        name: "Post"
        args { name: "id", by: "$.id" }
      }
    }
    def { name: "date" by: "grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, grpc.federation.time.UTC())" }
    def { name: "rand_source" by: "grpc.federation.rand.newSource(date.unix())" }
    def { name: "fixed_rand" by: "grpc.federation.rand.new(rand_source)" }
    def { name: "uuid" by: ".grpc.federation.uuid.newRandomFromRand(fixed_rand)" }
    def { name: "loc" by: "grpc.federation.time.loadLocation('Asia/Tokyo')"}
    def { name: "value1" by: "grpc.federation.metadata.incoming()['key1'][0]"}
    def { name: "a" message { name: "A" } }
    def { name: "sorted_values" by: "[4, 1, 3, 2].sortAsc(v, v)" }
    def { name: "sorted_items" by: "[user.Item{location:user.Item.Location{addr1:'a'}}, user.Item{location:user.Item.Location{addr1:'b'}}].sortDesc(v, v.location.addr1)" }
    def { name: "map_value" by : "{0: 0, 5: 500, 10: 1000}" }
  };
  Post post = 1 [(grpc.federation.field).by = "post"];
  string str = 2 [(grpc.federation.field).string = "hello"];
  string uuid = 3 [(grpc.federation.field).by = "uuid.string()"];
  string loc = 4 [(grpc.federation.field).by = "loc.string()"];
  string value1 = 5 [(grpc.federation.field).by = "value1"];
  string item_type_name = 6 [(grpc.federation.field).by = "federation.Item.ItemType.name(federation.Item.ItemType.ITEM_TYPE_1)"];
  string location_type_name = 7 [(grpc.federation.field).by = "federation.Item.Location.LocationType.name(federation.Item.Location.LocationType.LOCATION_TYPE_1)"];
  string user_item_type_name = 8 [(grpc.federation.field).by = "user.Item.ItemType.name(user.Item.ItemType.ITEM_TYPE_2)"];
  Item.ItemType item_type_value_enum = 9 [(grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"];
  int32 item_type_value_int = 10 [(grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"];
  Item.ItemType item_type_value_cast = 11 [(grpc.federation.field).by = "1"];
  int32 location_type_value = 12 [(grpc.federation.field).by = "federation.Item.Location.LocationType.value('LOCATION_TYPE_1')"];
  int32 user_item_type_value = 13 [(grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_2')"];
  A a = 14 [(grpc.federation.field).by = "a"];
  repeated int32 sorted_values = 15 [(grpc.federation.field).by = "sorted_values"];
  repeated Item sorted_items = 16 [(grpc.federation.field).by = "sorted_items"];
  map<int32, int32> map_value = 17 [(grpc.federation.field).by = "map_value"];
}

message A {
  message B {
    option (grpc.federation.message) = {
      def [
        { name: "foo" message: { name: "A.B.C" args { name: "type" string: "foo" } } },
        { name: "bar" message: { name: "A.B.C" args { name: "type" string: "bar" } } }
      ]
    };
    message C {
      string type = 1 [(grpc.federation.field).by = "$.type"];
    }
    C foo = 1 [(grpc.federation.field).by = "foo"];
    C bar = 2 [(grpc.federation.field).by = "bar"];
  }
  option (grpc.federation.message) = {
    def { name: "b" message { name: "A.B" } }
  };
  B b = 1 [(grpc.federation.field).by = "b"];
}

message Post {
  option (grpc.federation.message) = {
    def [
      {
        name: "res"
        call {
          method: "post.PostService/GetPost"
          request { field: "id", by: "$.id" }      
          timeout: "10s"
          retry {
            constant {
              interval: "2s"
              max_retries: 3
            }
          }
        }
      },
      { name: "post", by: "res.post", autobind: true },
      {
        name: "user"
        message {
          name: "User"
          args { inline: "post" }
        }
      }
    ]
  };
  string id = 1;
  string title = 2;
  string content = 3;
  User user = 4 [(grpc.federation.field).by = "user"];
}

message User {
  option (grpc.federation.message) = {
    def [
      {
        name: "res"
        call {
          method: "user.UserService/GetUser"
          request [
            { field: "id", by: "$.user_id" },
            { field: "type" by: "user.Item.ItemType.value('ITEM_TYPE_1')" }
          ]
          timeout: "20s"
          retry {
            exponential {
              initial_interval: "1s"
              randomization_factor: 0.7
              multiplier: 1.7
              max_interval: "30s"
              max_retries: 3
            }
          }
        }
      },
      { name: "user", by: "res.user", autobind: true }
    ]
  };
  string id = 1;
  string name = 2;
  repeated Item items = 3;
  map<string, google.protobuf.Any> profile = 4;
  oneof attr {
    AttrA attr_a = 5;
    AttrB b = 6;
  }
  message AttrA {
    option (grpc.federation.message).alias = "user.User.AttrA";
    string foo = 1;
  }
  message AttrB {
    option (grpc.federation.message).alias = "user.User.AttrB";
    bool bar = 2;
  }
}

message Item {
  option (grpc.federation.message).alias = "user.Item";

  enum ItemType {
    option (grpc.federation.enum).alias = "user.Item.ItemType";

    ITEM_TYPE_UNSPECIFIED = 0;
    ITEM_TYPE_1 = 1;
    ITEM_TYPE_2 = 2;
    ITEM_TYPE_3 = 3;
  }
  message Location {
    option (grpc.federation.message).alias = "user.Item.Location";

    string addr1 = 1;
    string addr2 = 2;
    oneof addr3 {
      AddrA addr_a = 3;
      AddrB b = 4;
    };
    message AddrA {
      option (grpc.federation.message).alias = "user.Item.Location.AddrA";
      string foo = 1;
    }
    message AddrB {
      option (grpc.federation.message).alias = "user.Item.Location.AddrB";
      int64 bar = 1;
    }

    enum LocationType {
      LOCATION_TYPE_0 = 0;
      LOCATION_TYPE_1 = 1;
    }
  }
  string name = 1;
  ItemType type = 2;
  int64 value = 3;
  Location location = 4;
}
