syntax = "proto3";

package org.federation;

import "google/protobuf/any.proto";
import "grpc/federation/federation.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {
    dependencies: []
  };
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  option (grpc.federation.message) = {
    def [
      { name: "post" message { name: "Post" } },
      {
        name: "customHandler"
        message {
          name: "CustomHandlerMessage",
          args: {name: "arg", string: "some-arg"}
        }
      },
      {
        validation {
          error {
            code: FAILED_PRECONDITION
            message: "validation1 failed!",
            if: "post.id != 'some-id'"
          }
        }
      },
      {
        validation {
          error {
            code: FAILED_PRECONDITION
            message: "validation2 failed!",
            if: "post.id != 'some-id'"
          }
        }
      },
      {
        validation {
          error: {
            code: FAILED_PRECONDITION,
            message: "validation3 failed!",
            details: {
              if: "$.id != 'correct-id'",
              message: [
                {
                  name: "CustomMessage",
                  args: {
                    name: "message",
                    string: "message1"
                  }
                },
                {
                  name: "CustomMessage",
                  args: {
                    name: "message",
                    string: "message2"
                  }
                }
              ]
              precondition_failure {
                violations: [
                  {
                    type: "'type1'"
                    subject: "post.id"
                    description: "'description1'"
                  }
                ]
              }
              bad_request {
                field_violations: [
                  {
                    field: "post.id"
                    description: "'description2'"
                  }
                ]
              }
              localized_message {
                locale: "en-US"
                message: "post.content"
              }
            }
          }
        }
      }
    ]
  };
  Post post = 1 [(grpc.federation.field).by = "post"];
}

message Post {
  string id = 1 [(grpc.federation.field).string = "some-id"];
  string title = 2 [(grpc.federation.field).string = "some-title"];
  string content = 3 [(grpc.federation.field).string = "some-content"];
}

message CustomMessage {
  string message = 1 [(grpc.federation.field).by = "$.message"];
}

message CustomHandlerMessage {
  option (grpc.federation.message) = {
    def {
      validation {
        error {
          code: FAILED_PRECONDITION
          if: "$.arg == 'wrong'"
        }
      }
    }
    custom_resolver: true
  };
}
