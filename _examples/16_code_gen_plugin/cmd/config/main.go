package main

import (
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"runtime"
)

var bufGenYAML = `
# Code generated by cmd/config/main.go. DO NOT EDIT!
version: v1
managed:
  enabled: true
plugins:
  - plugin: go
    out: .
    opt: paths=source_relative
  - plugin: go-grpc
    out: .
    opt: paths=source_relative
  - plugin: grpc-federation
    out: .
    opt:
      - paths=source_relative
      - plugins=file://plugin.wasm:%s
`

var grpcFederationYAML = `
# Code generated by cmd/config/main.go. DO NOT EDIT!
imports:
  - proto
src:
  - proto
out: .
plugins:
  - plugin: go
    opt: paths=source_relative
  - plugin: go-grpc
    opt: paths=source_relative
  - plugin: grpc-federation
    opt:
      - paths=source_relative
      - plugins=file://plugin.wasm:%s
`

func main() {
	if err := run(); err != nil {
		log.Fatalf("%+v", err)
	}
}

func run() error {
	wasm, err := os.ReadFile(filepath.Join(root(), "plugin.wasm"))
	if err != nil {
		return err
	}
	hash := toSha256(wasm)
	if err := os.WriteFile(
		filepath.Join(root(), "buf.gen.yaml"),
		[]byte(fmt.Sprintf(bufGenYAML, hash)),
		0o600,
	); err != nil {
		return err
	}
	if err := os.WriteFile(
		filepath.Join(root(), "grpc-federation.yaml"),
		[]byte(fmt.Sprintf(grpcFederationYAML, hash)),
		0o600,
	); err != nil {
		return err
	}
	return nil
}

func toSha256(v []byte) string {
	hash := sha256.Sum256(v)
	return hex.EncodeToString(hash[:])
}

func root() string {
	return filepath.Join(curDir(), "..", "..")
}

func curDir() string {
	_, file, _, _ := runtime.Caller(0) //nolint:dogsled
	return filepath.Dir(file)
}
